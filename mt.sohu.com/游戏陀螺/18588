➜财报季：51家游戏公司Q3超7成盈利，14家亏损最大亏损幅度超10000%
http://www.sohu.com/a/433591826_204728	46329
<p><span><strong><span style="font-size: 16px;">导读：</span></strong><span style="font-size: 16px;">游戏公司Q3可谓喜忧参半，喜的是营收较去年有所增长，忧的是销售和研发端成本不断上升。</span></span></p>
<p><span style="font-size: 16px;">近来，除部分上市游戏公司如IGG、第七大道、中手游等尚未发布Q3财报外，国内多数游戏公司均已披露Q3业绩。截止至11月20日，游戏陀螺汇总了51家上市游戏公司2020年Q3单季度财报，发现：</span></p>
<p><span style="font-size: 16px;">本季度，有超7成的游戏公司盈利，逾6成实现净利润同比增长，其中，净利润超过1亿元的有16家，占比31.37%，与去年同期持平。净利润为负值的有14家，其中三五互联、ST天娱、ST富控、文投控股已多个季度亏损。</span></p>
<p><span style="font-size: 16px;">在营收方面，51家游戏公司Q3单季度营收共868.75亿元，同比增长8.47%，过半公司收入在2亿元以上。 <strong>其中，腾讯及网易游戏营收依然遥遥领先，也是Q3唯二单季游戏营收过百亿的公司。</strong></span></p>
<p><span style="font-size: 16px;">除这两家外，营收过10亿元的有：欢聚集团、世纪华通、三七互娱、完美世界、金山软件等7家，营收在10亿元到1亿元之间的有27家，占比过半，乃游戏发展中坚力量。</span></p>
<p><span><strong><span style="font-size: 16px;">具体来看，本季度相关结论：</span></strong><span style="font-size: 16px;"></span></span></p>
<p><span style="font-size: 16px;">①腾讯、网易所占游戏市场份额持续扩大，行业八二定律明显；</span></p>
<p><span style="font-size: 16px;">②营收呈现两极分化，Q3单季度营收规模不及去年同期；</span></p>
<p><span style="font-size: 16px;">③超7成公司盈利， <strong>但净利低于1亿元的占比达68.62%，行业集中度高</strong>； </span></p>
<p><span style="font-size: 16px;">④哔哩哔哩成本季度“亏损王”，众应互联亏损幅度超10000%；</span></p>
<p><span style="font-size: 16px;">⑤头部游戏公司市场推广销售费用剧增，出现高成本挤占利润空间情况；</span></p>
<p><span style="font-size: 16px;">⑥重销售轻研发时代已逝，头部游戏公司研发成本增加，投资亦以研发为主。</span></p>
<p><span style="font-size: 16px;"><strong>腾讯、网易Q3单季游戏营收552.8亿元，占全国超8成游戏收入</strong></span></p>
<p><span style="font-size: 16px;">今年Q3季度，腾讯与网易的游戏营收均呈现增长态势，从同比增速来看，腾讯略胜一筹，今年Q3单季腾讯网络游戏总营收及手游营收同比均超过40%，且手游营收已连续三个季度同比增长超60%。与之相比，网易游戏总营收同比增速有所放缓，手游营收增速较去年同期下降3个百分点。</span></p>
<p><span style="font-size: 16px;">具体来看， <strong>腾讯Q3单季游戏营收414.22亿元，同比增长45%；其中手游营收391.73亿元，同比增长61.20%；网易Q3单季游戏营收138.60亿元，同比20.20%，手游营收101.10亿元，同比增长13.00%。</strong></span></p>
<p><span style="font-size: 16px;">上述两家公司Q3单季游戏总营收达552.82亿元，较去年同期的473.30亿元增长了16.80%；手游总营收为492.80亿元，较去年同期的324.90亿元增长了51.68%。</span></p>
<p><img src="//p3.itc.cn/q_70/images03/20201122/058fc17e6a634c268f4f93c5560d8025.jpeg" /></p>            <div class="lookall-box">
<div class="lookall-shadow"></div>
<section class="lookall">
<a href="javascript:;" class="show-all" id="showMore">
<em>展开全文</em>
</a>
</section>
</div>
<div class="hidden-content control-hide">
<p><img src="http://p3.itc.cn/q_70/images03/20201122/93112cc981614c4f941505ef21e3447d.jpeg" /></p>
<p style="text-align: justify;"><span style="font-size: 16px;">腾讯及网易在财报</span><span style="font-size: 16px;">中均称，其游戏营收增长来源于国内外手游推行的成功，但双方均未透露头部手游的营收情况。</span></p>
<p><span style="font-size: 16px;">方正证券研报认为，腾讯游戏营收来源于《王者荣耀》《和平精英》《QQ飞车》《一人之下》《鸿图之下》《天涯明月刀》等重点产品。Sensor Tower报告称，2020年9月《王者荣耀》全球收入2.4亿美元，较2019年9月增长87%。</span></p>
<p><span style="font-size: 16px;">网易在业绩会上也表示，Q3游戏营收主要来源于《荒野行动》《率土之滨》《阴阳师》《光·遇》等手游与《梦幻西游》电脑版、《大话西游2》和《逆水寒》等经典游戏产品。Sensor Tower近日发布的《2020年Q3日本手游市场数据》显示，网易的《荒野行动》Q3预估收入近1.8亿美元，同比增长52%，环比增长13.8%，位居日本手游收入榜第3名。</span></p>
<p><span style="font-size: 16px;">值得注意的是，腾讯及网易也是本季度唯二单季度营收过百亿的游戏公司，且所占游戏市场份额正在扩大。据中国音数协游戏工委与中国游戏产业研究院共同发布《2020年度第三季度中国游戏产业报告》， <strong>中国游戏市场实际销售收入685.22亿元，同比增长15.72%。在这680多亿元的游戏实际销售收入中，腾讯和网易游戏收入占比超8成，环比呈现正增长态势，所占市场份额进一步扩大。</strong></span></p>
<p><span style="font-size: 16px;"><strong>头部及尾部公司营收呈现两极分化，Q3单季度营收规模不及去年同期</strong></span></p>
<p><span style="font-size: 16px;">除腾讯及网易外，Q3单季营收规模靠前的有欢聚集团、世纪华通、三七互娱、完美世界、金山软件、哔哩哔哩和游族网络等，营收均超过10亿元。而营收未达1亿元的也有15家，较去年同期增加了3家，其中ST富控、ST游久、ST长动位居单季营收规模最小榜前三。 <strong>处于中间值也就是营收在10亿元到1亿元之间的有27家，其中过半实现营收同比增长。</strong></span></p>
<p style="text-align: center;"><img src="http://p5.itc.cn/q_70/images03/20201122/513beab964bb43bbbb7478ce2736f718.jpeg" /></p>
<p style="text-align: justify;"><span style="font-size: 16px;">在这批游戏公司中，欢聚集团因以直播为主游戏为辅，暂且不过多讨论。</span><span style="font-size: 16px;">就游戏业务而言，结合上半年营收情况，</span><strong>世纪华通及三七互娱已进入到今年百亿游戏俱乐部阵营中，完美世界第四季度若能保持前两季度的发展态势，亦有望进入该阵营。</strong></p>
<p style="text-align: justify;"><span style="font-size: 16px;">在游戏业务上，今年Q3世纪华通凭借《阿瓦隆之王》经典游戏产品的稳定收益以及新游《Idle Courier Tycoon（我快递送得贼快》的突出表现，营收呈现正向增长。</span><span style="font-size: 16px;">三七互娱或因推广研发成本高企挤占利润空间，营收同比出现微下滑，但整体发展仍十分稳健。</span></p>
<p><span style="font-size: 16px;">完美世界和金山软件营收则得益于其重磅游戏产品，完美世界旗下《诛仙》《完美世界》《新笑傲江湖》《新神魔大陆》等游戏产品在Q3仍保持稳定收益，其中，《新神魔大陆》自从7月上线后持续位居iOS畅销榜Top20，因Q3为推广集中期，业绩贡献或在第四季度有所体现。金山软件则凭借子公司西山居《剑网3》在本季度实现游戏营收同比增长19%至7.88亿元。</span></p>
<p><span style="font-size: 16px;">整体来看，头部游戏公司的表现可圈可点。与之相比，尾部游戏企业的营收情况则并不乐观，尤其是已被冠以“ST”的公司。本季度有15家游戏公司营收低于1亿元，且营收同比均出现下滑情况，净利润下滑非常明显。</span></p>
<p><span style="font-size: 16px;">部分游戏公司将营收及净利下滑归咎于推广费用的增加，如艾格拉斯在Q3财报中指出，公司净利润较上年同期减少的原因，系“公司收入较成本下降较快，且推广费用增加所致”。期内，公司净利润为-0.04亿元，同比增长-105.82%。</span></p>
<p><span style="font-size: 16px;"><strong>从营收规模上看，2020年Q3单季度这49家（除腾讯及网易）总营收315.95亿元，较去年同期减少11.62亿元，这意味着部分上市游戏公司的营收规模不及2019年同期。</strong>数据显示，2020年Q3单季营收增幅最大的神州泰岳、姚记科技、中青宝等，降幅最大的有ST富控、ST长动、ST鼎龙。 </span></p>
<p><span style="font-size: 16px;"><strong>51家公司逾7成盈利，其中净利低于1亿元占比68.62%，行业集中度偏高</strong></span></p>
<p><span style="font-size: 16px;">在本次汇总的51家上市游戏公司财报中，有37家净利润为正值，占比72.55%，其中，有21家净利润低于1亿元，占比41.18%，较去年下降了5.88个百分点。有14家净利润为负值，包括艾格拉斯、三五互联、中青宝、哔哩哔哩、蓝港互动等。</span></p>
<p style="text-align: center;"><img src="http://p0.itc.cn/q_70/images03/20201122/1cc4347fbd4147128e1566c61d018df5.jpeg" /></p>
<p style="text-align: justify;"><strong><span style="font-size: 16px;">在盈利的游戏公司中，有多家净利润同比明显下滑，如游族网络、ST大晟、智傲控股、星辉娱乐等同比降幅超过60%。</span></strong><span style="font-size: 16px;">其中降幅最大的系游族网络，其Q3净利润0.66亿元，同比增长-78.03%。</span></p>
<p style="text-align: justify;"><span style="font-size: 16px;">对此净利润下滑原因，游族网络解释称，公司在三季度针对海外3款产品（《少年三国志 2》《Red:Pride of Eden》《GOTM》）进行集中推广，导致三季度单季度净利润较低。</span></p>
<p><span style="font-size: 16px;">在亏损的公司中，哔哩哔哩以单季亏损9.9亿元居首，不过其亏损来源于直播业务及其他，而非游戏业务，目前其游戏营收12.75亿元，同比增长36.65%。亏损幅度最大的为众应互联，Q3净利润为-0.67亿元，同比增长-13946.6%。</span></p>
<p><span style="font-size: 16px;">众应互联在财报中表示，亏损原因主要系旗下彩量科技置出，MMOGA电子商务平台合作商佣金率下降导致佣金收入减少所致，且前三个季度财务费用较上年同期增长68.76%，本期未偿还的利息及违约金增加。</span></p>
<p><span style="font-size: 16px;">整体情况来看，本季度51家游戏公司发展并不乐观，一方面，随着国内疫情防控得当，“宅经济”用户红利影响消退，缺乏精品游戏的公司面临激烈竞争；另一方面，行业一线游戏企业进驻买量市场，且多采取“爆款爆量”打法，推广买量成本增加，挤占利润端空间。</span></p>
<p><span style="font-size: 16px;"><strong>头部游戏公司市场推广销售费用提升，成本较快增长挤占公司利润空间</strong></span></p>
<p><span style="font-size: 16px;">早前，天风证劵曾报告称，包括巨人网络、祖龙娱乐、掌趣科技、心动公司在内的25家公司2020年上半年总体销售费用为100.95亿元，同比增长24.18%。</span></p>
<p><span><strong><span style="font-size: 16px;">游戏陀螺也曾报道称，今年上半年多家游戏公司的推广成本增加。</span></strong><span style="font-size: 16px;">据统计，今年上半年，三七互娱、世纪华通公司的流量费用、广告推广费用占其销售费用比重已超过90%，完美世界、巨人网络、游族网络的广告宣传费用比重也在50%以上。游族网络财报显示，上半年公司宣传及会务费占其当期销售费用的比例达60.97%。</span></span></p>
<p><span><strong><span style="font-size: 16px;">而本季度，头部游戏公司推广销售费用依然持续走高。</span></strong><span style="font-size: 16px;">Q3营收在10亿元以上的公司，花费在游戏推广和宣传上的费用占总营收比重不低。以纯游戏公司三七互娱、世纪华通、完美世界、游族网络为例，三七互娱Q3单季销售费用达21.38亿元，占总营收64.77%，世纪华通销售费用达6.17亿元，占比15.42%，完美世界销售费用达6.29亿元，占比21.54%。</span></span></p>
<p><span style="font-size: 16px;">上海证券在近日发布的研报中提到，Q3单季度中A股游戏板块的利润端环比下降，多家游戏公司业绩表现不佳，买量成本等游戏推广开支的上升为一大原因。因此，在实行大推广高买量的游戏市场，企业的竞争较大，利润端被压缩的几率增高。</span></p>
<p><span style="font-size: 16px;"><strong><span style="font-size: 16px;">头部及腰部公司均在加码研发，投资亦以研发为主，希望用精品博市场</span></strong></span></p>
<p><span style="font-size: 16px;">除销售成本增加外，今年Q3季度乃至前三季度，游戏公司在财报或对外宣传中均透露出一个信息“以研发为主”，体现在财报中便是企业内部研发成本不断增加，而对外则是外部投资多聚焦在研发团队上。</span></p>
<p><span style="font-size: 16px;">财报显示，今年前三季度，完美世界和世纪华通的研发费用均超过了10亿元，前者研发费用达11.83亿元，同比增长17.6%，后者研发费用达10.27亿元，同比增长8.28%。 <strong>三七互娱方面也在加码研发，今年前三季度的研发费用高达8.56亿元，同比增长65.86%。</strong></span></p>
<p><span style="font-size: 16px;">头部公司外，腰部游戏公司如电魂网络、金科文化、冰川网络、宝通科技、掌趣科技、吉比特等都无一例外加大了研发费用的比重。电魂网络三季度研发投入1.18亿元，同比增长42.98%，吉比特三季度研发费用2.96亿元，同比增长29.22%。当然也有部分公司研发费用出现同比下降，如巨人网络、艾格拉斯等。</span></p>
<p><span style="font-size: 16px;">在投资方面，早期游戏陀螺也曾有过统计，今年前三季度45起游戏投融资逾7成聚焦研发，其中腾讯及网易主要投资海外游戏团队，三七互娱、哔哩哔哩、心动公司则跟注重国内游戏团队，期内三七互娱拿下了易娱网络、心动公司投资了椰岛游戏，第七大道并购卓越互动。</span></p>
<p style="text-align: center;"><img src="http://p1.itc.cn/q_70/images03/20201122/633154f239ad46579d3b0b134c32def2.jpeg" /></p>
<p style="text-align: center;"><img src="http://p1.itc.cn/q_70/images03/20201122/2bce50c86cae4360add153e647a0fbd4.jpeg" /></p>
➜【干货分享】Voodoo中国区负责人：如何实现爆款率2%？
http://www.sohu.com/a/433591832_204728	46329
<p><span style="font-size: 16px;">11月17日，在中国Unity线上技术大会—游戏专场的会议上，Voodoo中国区开发者关系负责人刘毅带来了主题为“Voodoo工具链助力Unity的开发者打造下一款超休闲游戏的全球爆款”的内容分享，详细介绍了如何借助工具，实现超休闲游戏在开发效率上的提升。 </span></p>
<p style="text-align: center;"><img src="http://p6.itc.cn/q_70/images03/20201122/8fa914d7021f48ae8f0bf5797406a733.png" /></p>
<p><span style="font-size: 16px;"><strong>以下是演讲内容（有节选）：</strong></span></p>
<p><span style="font-size: 16px;">大家好！之前大家应该知道Voodoo是做超休闲游戏的发行，在过去几年里，我们发行了大约数百款超休闲游戏，其中有很多款游戏已经引领了整个超休闲行业的潮流，大家会问你们的创意来自于哪里？结论非常的简单，所有的创意都是来自于开发者，都是来自于全球优秀的Unity的开发者。</span></p>
<p><span style="font-size: 16px;">我们今天想讨论的一个话题是 <strong>效率问题</strong>，但是在效率问题是由创意来引申出来的。 </span></p>
<p><span style="font-size: 16px;"><strong>成功率只有2%，voodoo支持小团队开发，快速验证的模式</strong></span></p>
<p><span style="font-size: 16px;">首先根据我们大量的测试表明，从一个游戏的创意到最终成为一个全球爆款，这中间的 <strong>成功概率可能只有2%</strong>。这意味着对大多数的开发者而言，他可能需要持续地测试到第50款创意的时候，才可能出现一个成功的爆款，这是我们通过数据表明的结果。不过这里只是一个概率的问题，有的开发者可能二、三十款就能测出来，有的可能到了第50款都测不出来。 </span></p>
<p><span style="font-size: 16px;">于是问题就来了，从创意到全球爆款，如何高效地以最短的时间、最大的效率、最大的可能达到这样一个2%的概率呢？Voodoo的做法通常是两个方面。</span></p>
<p style="text-align: center;"><img src="http://p2.itc.cn/q_70/images03/20201122/ba430b2c5e7442f0a7d5e0d6ab01abe8.png" /></p>            <div class="lookall-box">
<div class="lookall-shadow"></div>
<section class="lookall">
<a href="javascript:;" class="show-all" id="showMore">
<em>展开全文</em>
</a>
</section>
</div>
<div class="hidden-content control-hide">
<p><span style="font-size: 16px;"><strong>首先，理念</strong>。理念方面我们强调的是两件事情： </span></p>
<p><span style="font-size: 16px;"><strong>第一，我们建议通过小团队组建来做超休闲游戏的创意突破。</strong>小团队的原因非常简单，它的沟通效率非常高。还有 <strong>两三个人的成本比10个人的成本要低，于是它接近成功的机会概率更多</strong>。怎么理解这句话？ </span></p>
<p><span style="font-size: 16px;">我们试想一下，如果说两个人的成本是2万，如果你有100万的启动资金，意味着你可以有50次犯错机会，如果是一个10个人的团队，你还是这100万，整个你的试错机会只有10次。如果是接近2%的成功概率，你是50次试错的机会，能够更接近于你的成功，还是10次更接近于成功，我相信大家一目了然。小团队成为了你可以去在超休闲游戏中不断探索你的创意成功的一个非常重要的你需要把控的一个环节。</span></p>
<p><span style="font-size: 16px;"><strong>第二，好项目是砍出来的。</strong>这句话怎么理解？说白了，能舍才有得。首先大多数人在思考一个问题的时候，都会认为我这个项目做了3个月，即使测试数据不好，但还能再救一把，不一定要砍吧。更多团队的项目我看了不敢测，越不敢测，越不能上线，越推迟，沉没成本就会不断提升。 </span></p>
<p><span style="font-size: 16px;">我们大家知道作为一个理性人而言，你是不应该考虑沉没成本，而应该考虑它边际的ROI。但是我想说的是我们都是人，每一个人都会被沉没成本这件事情干扰你的判断。如果你想做一个好的项目，你必须告诉自己，它会干扰我，它是一个干扰选项，少在沉没成本上纠结。</span></p>
<p><span style="font-size: 16px;"><strong>其次，如何避免在沉没成本上纠结</strong>，我觉得首先我们需要考虑的两件事情： </span></p>
<p><span style="font-size: 16px;"><strong>第一，你需要知道什么是机会成本。</strong>机会成本就是你现在做A项目，继续做它，你可能能赚1块钱，但是因为你做它，你没有足够的精力做另外一个项目，另外一个项目可能帮你赚100块，事实上你在做A项目能赚这一块钱的成本你是付出了100块钱的成本去赚这1块钱，这是你的机会成本。 </span></p>
<p><span style="font-size: 16px;">如果大家用这样一种思维考虑问题，你会知道把一个没太大希望的项目砍掉，事实上是最好的选择。因为只有这样，你才能空出足够的带宽和资源做一个更赚钱的项目，这是理念上的问题。</span></p>
<p><span style="font-size: 16px;"><strong>第二，降低你的沉没成本</strong>。当你的沉没成本足够低的时候，你才有比较小的感情依赖，这时候你比较容易放弃它，容易帮你做决策。这时候要做的事情就是 <strong>快速的原型开发和快速的实验。</strong>怎么理解它？ </span></p>
<p><span style="font-size: 16px;">比如10个人的团队花了3个月，甚至是半年的时间做了一个项目，这时候的沉没成本是很大的，因为有大量的人力资源投入，于是这时候开发者是不太容易砍的。但是倘若是两个人花了一周做一个项目，再花一周测试数据，也就两周的时间，如果数据不好，这时候放弃它会不会容易一点？</span></p>
<p><span style="font-size: 16px;">所以我的想法就是希望告诉大家，把沉没成本降低，这样可以帮助你砍你没有价值的项目，把你的资源放到更有价值的项目上。</span></p>
<p><span style="font-size: 16px;"><strong>从测试到规模化， 借助效率工具，最快达到2% </strong></span></p>
<p><span style="font-size: 16px;">建立好正确的理念，接下来我们会谈更多的方法和工具。</span></p>
<p><span style="font-size: 16px;">Voodoo做发行，简单说是分三个阶段： <strong>第一是测试期，第二是上线期，第三是规模化。</strong>在测试期的时候，我们会从创意层面帮开发者筛选进入CTR和CPI的测试，如果数据达标了之后我们会进入小规模上线的阶段，会进入大量的 <strong>A/B test</strong>，功能测试。之后进入正式的上线，然后进行规模化，直到打造下一个全球爆款。 </span></p>
<p><span style="font-size: 16px;">在这过程中，我们会发现其实大多数时间大家都会放在前面的测试期，在测试期的时候会有不断的测试原型和创意出来，如何去验证你的创意是不是好的？最好的方法就是通过测试，而不是人为的干扰，这后面我们还会继续去讲到。</span></p>
<p><span style="font-size: 16px;">下面的表格是我们做出来一个大概的时间表，横轴上写的是W1、W2，按照时间来分布，左边是你的项目，意味着在第一周的时候我们开始做创意和讨论；第二周进入了原型的开发；第三周上线测试。因为我们强调的是一个快速地迭代开发，一周的版本就是足够进行测试的，后面我们会继续讲到，这部分主要讲排期，如何更好的利用你的时间和效率。</span></p>
<p style="text-align: center;"><img src="http://p8.itc.cn/q_70/images03/20201122/8122b436a2ff427aaaad76478b153444.png" /></p>
<p><span style="font-size: 16px;">在第二周的时候，我们也会去鼓励大家持续做创意。为什么？</span></p>
<p><span style="font-size: 16px;">一旦你的week project 1项目被迭代，最终是决定砍掉的话，第四周开发者可能就面临停工状态，或者说是为了第三周在进行测试等结果的时候，得有事干。我们强调项目要滚动起来，即开发者每周都要出创意，每周都要做原型开发，每周都要进行测试，每周都要决定是否要迭代或者砍掉这个项目。这样才可以在最短的时间内找到全球爆款的idea。直到最终这款产品在Week n的时候，我们就会进行上线，然后规模化。</span></p>
<p><span style="font-size: 16px;">到了游戏的上线阶段，Voodoo是有不同的团队会在不同的阶段介入进来，不仅包括发行团队，还有市场团队，甚至是联合开发团队，帮助提升项目生命周期的运营团队，还有法务团队帮开发者保护产品版权。</span></p>
<p><span style="font-size: 16px;">另外是刚才提到的工具。</span></p>
<p><span style="font-size: 16px;">在原型创意的阶段，Voodoo除了刚才给大家提供一个很科学的方法，我们还会提供很多的工具，有自动测试平台，可以提供iOS和安卓的测试，还有分析系统等等。</span></p>
<p style="text-align: center;"><img src="http://p7.itc.cn/q_70/images03/20201122/5ba6977449df4da982e12f233ebbf965.png" /></p>
<p><span style="font-size: 16px;">在Voodoo看来我们关注的是开发者而不只是游戏。游戏的成本是小概率，但是开发者的成功是一个长线的东西，我们需要培养开发者的理念，还有开发者的效率和思维方式。</span></p>
<p style="text-align: center;"><img src="http://p8.itc.cn/q_70/images03/20201122/eb444f04be244c24946f77885737be68.png" /></p>
<p><span style="font-size: 16px;">大家可以看到Voodoo最近好几款游戏都是由开发者连续成功的案例，包括我们的《弹弹球》、《Tower Run》实际是来自于一个开发者。还有最近非常火的《涂鸦骑士》，这个团队一年前还发过另外一款全球爆款的产品，叫做《Flappy Dunk》。</span></p>
<p><span style="font-size: 16px;">所以我们专注的是开发者，是工作室，不只是一两款游戏。这也意味着刚才提到的我们在创意阶段就要介入，帮开发者做分析。其实有时候开发者手里拿了十个项目，但是就两三个人，只能做一。Voodoo要做的事情就是，告诉开发者做哪个最有价值。</span></p>
<p><span style="font-size: 16px;">怎么判断哪个最有价值的？我们会有一些更多的市场信息给到开发者，供开发者来做判断，最终的决定由开发者来说。要做什么，不是Voodoo说了算，而是开发者说了算。而这个决策最终会通过测试来检验，这样尽量避免人为因素的干扰。</span></p>
<p><span style="font-size: 16px;">而超休闲游戏的理念和创作的思路，我们会专注于一个游戏的核心玩法。Voodoo强调游戏的创新，创新不只是换一个皮，做一些微创新，而是一个质的提升，强调的是核心的游戏体验和核心的游戏乐趣，这些东西都是我们希望开发者可以专注的地方，这就在前期我们包括辅助工具和流程能够做到的。</span></p>
<p><span style="font-size: 16px;">这里不得不提到刚才说的自动测试平台，它可以帮助开发者用最短的时间在Voodoo的平台上开启你的测试，这个自动测试平台我们还辅助了新手引导，如何去做CPI，如何让你的游戏有传播性，如何让你的游戏让用户得到满足感等等。</span></p>
<p><span style="font-size: 16px;">刚才我们提到了自动测试平台，上面最重要的两个东西就是如何测你的CTR和CPI。大家就会问CTR测试和CPI测试有什么区别？怎么去做？这个问题一直困扰着大家，我来解释一下。</span></p>
<p><span style="font-size: 16px;">首先看CPI测试，如果你一周可以出包，建议做CPI测试。为什么？因为在CPI测试的时候，我们同时会植入Tiny Sauce，是一个结合了GA还有Voodoo分析工具的一个SDK集，它是支持Unity的，并且目前只支持Unity。</span></p>
<p style="text-align: center;"><img src="http://p8.itc.cn/q_70/images03/20201122/94664dc01be2402fa39ec724774c14cf.png" /></p>
<p><span style="font-size: 16px;">在这个时候你可以直接测试到CPI，并且可以同时测留存。这时候你需要做的是什么，你需要准备一个游戏包体，我们建议iOS优先，20个关卡大概10到15分钟的游戏时长就够了，因为这已经足够测试出我们需要的数据，不需要更多的东西。与此同时嵌入Tiny Sauce，第一次植入大概会花两个小时到三个小时，后面再次植入会更快更方便。</span></p>
<p><span style="font-size: 16px;">同时，你需要上传你自己的AppStore的账号，在美国市场上通过审核，你需要开你的Facebook的投放账户，并且和Voodoo关联，因为最终这个投放测试的钱是Voodoo帮你拨款，你不需要自己花钱测试。如果你有谷歌的账户，可以同时勾选GooglePlay，我们可以同时测iOS和安卓，但我还是鼓励iOS优先。如果你只有安卓包体，我们是不推荐测试的。原因非常简单， <strong>因为你在iOS上测试成功了的话，大概率它在安卓上也是成功的。反过来就不行。</strong></span></p>
<p><span style="font-size: 16px;">众所周知，iOS是会帮助游戏带来更多广告收入的一个更大的平台，我们希望在相关性最大、最有价值的平台上做测试，这样的测试结果才有效。</span></p>
<p><span style="font-size: 16px;">如果我的包体需要两到三周开发，我如何尽快去验证，我需不需要花两三周的时间做这个事情，玩法到底会不会被用户接受呢？这时我们做CTR测试， <strong>CTR测试并不是一个很完美的测试方式，因为它有它一定的不准确性。</strong>怎么讲？ </span></p>
<p><span style="font-size: 16px;">你在做CPI测试的时候， <strong>你的CPI如果是低于20每分的，你的CTR就越高</strong>。但是它不是绝对的，所以CTR只是一个重要的参考标准，并不是一个最科学的测试方式，但是 <strong>它的好处在于快，它可以让你在最短的时间之内可以看到这样一个游戏是否有潜力。</strong></span></p>
<p><span style="font-size: 16px;">我给大家举个例子，之前我们的《涂鸦骑士》在做CTR测试的时候，因为它的游戏开发需要一些时间，但是他不知道这个玩法是否有用户喜欢？于是他做了一个CTR的测试，他的CTR测试上线的时候，测试效果是10%，我们测试目标是5%。当我们看到10%的时候非常有信心这款游戏的测试数据会非常好，于是隔了一周之后，我们开始了CPI的测试，它的CPI测出来的数据是7每分。这就是中间的相关性和你如何要去做CTR测试，原因在于你希望尽快的去验证快，CTR的方式就是快，提供一定的测试参考依据。</span></p>
<p><span style="font-size: 16px;">如果你可以一周出包，直接进行CPI的测试是最好的。但你只有创意就想进入测试的话，可以进行CTR测试。只需要提供游戏视频、游戏名称和游戏的icon。</span></p>
<p><span style="font-size: 16px;">到进入上线阶段，我们要求开发者植入我们的Voodoo Sauce还有更多的分析工具，这样会更多的团队会融入到这个开发的过程当中来，帮到开发者。这里重点提一下A/B test。游戏在上线的时候会进入大量的A/B test，我们这边强调一个理念，任何的决定通过测试做出。</span></p>
<p style="text-align: center;"><img src="http://p1.itc.cn/q_70/images03/20201122/60087a70cb444acba7be4c9d0bd07e12.png" /></p>
<p><span style="font-size: 16px;">举个例子，图上中间偏绿色的部分用红色的框出来，它是一个ctrl是一个控制版本，这是我们原型，大家认为是一个基准。之后剩下所有的其他颜色柱状条都是我们想测试的功能，我们不知道哪个功能会比这个标准的功能好，于是我们要进行测试。</span></p>
<p style="text-align: center;"><img src="http://p5.itc.cn/q_70/images03/20201122/6dd70800ec0845a2a4f843c9d9fc78b6.png" /></p>
<p><span style="font-size: 16px;">测试的时候大家会发现一个问题，你必须要控制你的变量，因为你的两个测试版本的差异可能只是一个功能，只有通过这种对比测试才知道这样一个小小的改变是否是对你的游戏数据的提升有帮助。如果掺杂过多的变量，是无法做出判断的。如果你有很多功能想要去比较的话。你需要控制你的变量做多组的比较测试，如果一次不够，我们就做多次的测试。另外我们不要人为地判断哪个测试会好，哪个功能会好。</span></p>
<p><span style="font-size: 16px;">在你的数据达标的时候，我们要进入更多的A/B test，每周做一个版本的A/B test，立刻看结果，再做下一个版本的A/B test。我们的上线团队会给大家提建议，比如说哪个功能好，我们会把功能进行叠加，功能叠加之后两个功能在一起会不会好，也得测。你会发现有多组的比较测试，一轮一轮地进行之后，才能够知道你哪样一些组合、哪样一些改变是游戏用户能够接受的，而这些都会通过我们的测试工具帮大家完成。</span></p>
<p><span style="font-size: 16px;">借助工具在上线阶段提升效率之后，第三步就是到了规模化。规模化简单说就是如何帮大家将游戏的利润才能规模化，这时候我们提到了两点： <strong>第一是UA，第二是便捷性</strong>。在UA这块，大家知道Voodoo是全世界目前在超休闲领域里做买量比较有经验和优势的一个发行商，所以这块我们有一个非常专业的团队，帮开发者做各种各样的网络营销。 </span></p>
<p><img src="http://p0.itc.cn/q_70/images03/20201122/6a8b671614764395bc95ccdcf51b0321.png" /></p>
<p><span style="font-size: 16px;">便捷性上我们引入了一个Voodoo的SDK，我们叫做Voodoo Sauce，它的好处在于它将各种SDK、API都打包到一个工具集里面，简化开发者的工作流程。在上线的时候，你的包体里面就已经拥有了图片上所有的功能，包括隐私、各种广告，包括IAP包括各种追踪，各种测试工具。</span></p>
<p><span style="font-size: 16px;">总结来看，从创意阶段开始，Voodoo会提供专业的测试工具不断帮开发者提升这个测试的效率，尽快找到一个适合全球发行的大热产品的创意和原型。</span></p>
<p><span style="font-size: 16px;">进入到上线阶段，我们会以KPI为一个指引，进行更多的产品优化，包括A/B test。到了规模化阶段，我们有更多的市场团队加入进来，提升包括游戏的留存等等各种数据，以及货币化的阶段，我们会给开发者进行很优厚的分成，帮助团队成长，提供我们的各种技术支持。</span></p>
<p style="text-align: center;"><img src="http://p6.itc.cn/q_70/images03/20201122/4d312c4e9cfa4585ab06b64a82875390.png" /></p>
<p><span style="font-size: 16px;">而Voodoo的分成简单来说是以 <strong>下载量来进行分成的</strong>，避免了通过利润来分成的时候你需要考虑各种各样的因素，比如说最近的eCPM波动怎么样？最近的买量成本是不是很高？是不是导致我们的利润有波动？这些东西大家都不用考虑，只需要考虑下载量。 </span></p>
<p><span style="font-size: 16px;">还有一个原因就是 <strong>透明</strong>，因为下载量根据第三方工具进行跟踪的，所以不是Voodoo能够控制的。不同于以往的分成模式，分成模式你到底花了多少钱做UA，成本到底是多少，收入到底是多少，这些数据不是实时的，可能会有这样那样的沟通成本和信任的顾虑在里面，我们拿了一种非常透明的方式，我们用下载量来分成，又是有第三方监控，这是非常透明的方式，并且是用预期的方式帮大家做分成。 </span></p>
<p style="text-align: center;"><img src="http://p9.itc.cn/q_70/images03/20201122/67362567ee594bfaabd979650eeecff0.png" /></p>
<p><span style="font-size: 16px;">最后我们用Voodoo给所有开发者的自动平台上邀请邮件里的一句话来结束我们今天的分享： <strong>做创意、原型开发、测试、砍掉或迭代、继续测试……如此往复，直到寻找到属于你的超休闲游戏爆款。</strong>谢谢大家！ </span></p>
<p style="text-align: center;"><img src="http://p2.itc.cn/q_70/images03/20201122/d6a46ca4ff654c4aa817ff06dc5019f7.png" /></p>
➜【干货分享】利用技术优点，打造次时代手游
http://www.sohu.com/a/433598107_204728	46329
<p><span style="font-size: 16px;">11月16日，主题为“创新思，享未来”的中国Unity线上技术大会正式拉开帷幕。在17日晚的游戏专场中，掌趣科技技术专家（ILRuntime作者）林若峰以“Unity2019新特性在次时代手游《黑暗之潮》中的应用经验及技术分享”为主题发表演讲，分别介绍了URP和DOTS这两项技术的优势，以及它们在《黑暗之潮》上的实际应用效果。 </span></p>
<p><img src="http://p1.itc.cn/q_70/images03/20201122/a0df103e50b142259c2eef7018d8e7ca.png" /></p>
<p><span><strong><span>以下为演讲内容（节选）：</span></strong></span></p>
<p><span style="font-size: 16px;">大家好，我叫林若峰，目前任职于掌趣科技担任技术专家，主要在天马时空这边负责次世代手游《黑暗之潮》的客户端技术，以及公司客户端框架的开发和维护。</span></p>
<p><span style="font-size: 16px;">从Unity2018开始，Unity引入了不少的新技术，今天我主要给大家分享关于DOTS和URP这两项技术在实际商业项目当中运用的一些心得和体验。</span></p>
<p><span style="font-size: 16px;">首先简单介绍一下《黑暗之潮》。这是一款顶视角的次世代手游，目前处于内测阶段。虽然是一款锁定视角的游戏，但对画质和战斗细节的要求还是挺高的，采用了PBR渲染，场景当中有不少的动态光影效果，细节方面相当的丰富。</span></p>
<p><img src="http://p4.itc.cn/q_70/images03/20201122/00e766d4e51e49a2bd5c69af8b0ec10f.png" /></p>
<p><span style="font-size: 16px;">这是本次PPT分享的内容概要。</span></p>            <div class="lookall-box">
<div class="lookall-shadow"></div>
<section class="lookall">
<a href="javascript:;" class="show-all" id="showMore">
<em>展开全文</em>
</a>
</section>
</div>
<div class="hidden-content control-hide">
<p><img src="http://p8.itc.cn/q_70/images03/20201122/f155e965970549dc9924d780745b9675.png" /></p>
<p><span style="font-size: 16px;">正题开始之前先打一个小广告， <strong>ILRuntime是我制作的，</strong>这是一个C#热更解决方案，目前已经在大量商业项目中得到了验证，图中这四款游戏都是采用的ILRuntime进行的热更，大家如果对C#语言的热更方案感兴趣，可以在下面的Github地址上进一步的了解。 </span></p>
<p><img src="http://p2.itc.cn/q_70/images03/20201122/8d0640ce489c4f38a5f448a386fb8e3d.png" /></p>
<p><span style="font-size: 16px;">这是我们在 <strong>《黑暗之潮》这款游戏当中遇到的挑战。</strong></span></p>
<p><img src="http://p2.itc.cn/q_70/images03/20201122/266e92d5ed6444b5bda04089278f1ebb.png" /></p>
<p><span><strong><span>为什么要自定义渲染管线？</span></strong></span></p>
<p><img src="http://p6.itc.cn/q_70/images03/20201122/e807fc63cdea4b19be96ebbe79d44120.png" /></p>
<p><span style="font-size: 16px;">《黑暗之潮》选用了URP，URP是一个比较适合移动平台开发的PBR渲染管线，非PBR的东西也是可以拿它来渲染。</span></p>
<p><span style="font-size: 16px;">我们比较看重的一点是， <strong>URP拥有非侵入式修改的能力</strong>，在不修改URP源码的情况下，可以对它进行比较多的定制。另一点是URP <strong>有全部的C#源码，</strong>整个渲染过程基本能全部掌控在我们自己手里面，当出现问题或者遇到bug时，比较容易能够查到。 </span></p>
<p><span style="font-size: 16px;">源码的结构清晰，组织也非常合理，所以我们扩展和自定义起来相对来说是比较容易的。最关键的一点， <strong>URP的性能比Builtin内置管线要更好。</strong></span></p>
<p><img src="http://p6.itc.cn/q_70/images03/20201122/7a3cc8021d7442ac88e8c66bd7abad0f.png" /></p>
<p><span style="font-size: 16px;">很多人会问，为什么需要对渲染管线进行自定义，是不是因为URP有什么坑或者说是有些什么不能实现的，所以我们必须得去自定义呢？实际上不是的，因为 <strong>每个项目都有各自独特的需求，在更好地满足这些需求的情况下，就需要对渲染管线去进行一些定制。</strong></span></p>
<p><span style="font-size: 16px;">举个例子，下图角色释放了一个火焰效果的技能，但火焰效果的特效被渲染在了地面的裂纹之上，这是一个错误的表现。正确的是，这个火焰的特效应该盖在这些地表裂痕的上方。</span></p>
<p><img src="http://p3.itc.cn/q_70/images03/20201122/8715268a114b4fee9e619001ad689884.png" /></p>
<p><span style="font-size: 16px;">以前我们在Builtin管线中只能通过修改不稳定的Renderqueue，这么做有一个比较大的弊端，我们要新建一个Shader，或者要写比较复杂的逻辑。一旦引入了新的Shader，有可能刚才做的这些东西需要重新做一遍，非常麻烦，且容易反复出问题。</span></p>
<p><span style="font-size: 16px;">在Builtin当中，一些效果其实只能通过Shader Pass去实现。比如说我们想给这个物体增加一个描边，就需要在角色的Shader里面去额外的增加一个Pass。这样在渲染过程中，势必就会被多Pass给打断合批。</span></p>
<p><span style="font-size: 16px;">可以看到右边这幅图，在渲染object1的时候，如果说它的Shader有多个Pass，我们首先渲染Pass1，然后通过一个Set Pass call渲染Pass2，Set Pass call渲染Pass3，完了我们再渲染第二个物体，又把刚才的操作重复一遍，然后Pass1、Pass2、Pass3。</span></p>
<p><span style="font-size: 16px;">在渲染这两个物体的时候，就会有非常多的DrawCall，而且每次DrawCall切换开销都是比较大的。</span></p>
<p><img src="http://p9.itc.cn/q_70/images03/20201122/3b83930266714074bf4a46068fc6bded.png" /></p>
<p><span style="font-size: 16px;">实际上有更好的方式， <strong>用流水线的方式渲染这两个Pass。</strong>在渲染Pass1的时候，一口气把所有的object1、2、3全渲染了，完毕之后通过一次Set Pass Call去渲染Pass2，实际上三个物体总共需要两个Pass就可以渲染完毕，效率会高不少。 </span></p>
<p><img src="http://p5.itc.cn/q_70/images03/20201122/6dd2d6dc7382475c916517bfa73999db.png" /></p>
<p><span style="font-size: 16px;">还有一个问题，Unity是一个通用引擎，为了兼容性，在渲染的过程中，可能会在一些情况加入Blit操作。Blit操作相当于把全屏的结果进行一次复制，这个开销对移动平台来说非常大，因为移动平台的带宽是很有限的。 </span></p>
<p><span style="font-size: 16px;">我们的项目，因为对整个渲染流程比较清楚， <strong>知道哪些情况下可以使用Blit，哪些情况可以把它去掉。</strong>去掉的话，游戏的性能有比较大的改进，也能降低很多的带宽开销。 </span></p>
<p><span style="font-size: 16px;">另外，我们每个项目都有一些项目特有的效果，比如下图，对于URP本身，默认情况下，扭曲、空气扰动效果只对不透明物体生效，火焰在这个地方就会显得比较突兀，因为不受扰动效果影响。我们对它进行定制，最后实现 <strong>空气扰动效果同样能够对火焰产生影响。</strong></span></p>
<p><img src="http://p1.itc.cn/q_70/images03/20201122/4e14a2f0d1584ec0a5729c4f5a8d8fb9.png" /></p>
<p><span><strong><span>URP的渲染管线</span></strong></span></p>
<p><span style="font-size: 16px;">看下面的流程图，在 <strong>开启了动态光影的情况下，URP首先去渲染主光源的Shadowmap，再去渲染附加光源的为Shadowmap。</strong>主光源在URP里主要指充当太阳光的一栈方向光，附加光源指除了那栈方向光以外的，比如点光源、射灯之类的动态光源。 </span></p>
<p><span style="font-size: 16px;">渲染完这两张shadowmap之后，URP会进行Depth Prepass的操作。</span></p>
<p><span style="font-size: 16px;">通常来说，Depth Prepass最主要的作用是，预先把整个场景所有物体的深度渲染一次，后面再进行不透明物体渲染的时候，直接使用深度的结果去进行深度测试，就可以利用Early Z把一些不必要的片源去掉。在AlphaTest的时候，这个像素的深度要在比较后期才能够决定，所以如果没有Depth Prepass的话，Early Z会在这些地方失效。</span></p>
<p><span style="font-size: 16px;">但是</span><strong><span style="font-size: 16px;">在URP当中，Depth Prepass没有这个作用，只是把场景里面所有的物体深度渲染到一张单独的RT当中，这个RT是拿给后面的效果进行使用的。</span></strong><span style="font-size: 16px;"></span></p>
<p><span style="font-size: 16px;">做完Depth Prepass之后，会进行所有不透明物体的绘制，之后进行天空盒的绘制，然后进行Copy Color操作。如果说用户在渲染管线的设置中，开启了Color Pictures功能，它就会把当前的渲染结果复制到一张独立的RT上面，供后期的效果使用。</span></p>
<p><span style="font-size: 16px;">然后进行所有透明物体的绘制，再对全屏进行后效处理。如果还有UI，会去绘制UI，之后把当前所有的渲染结果进行最后的一次Blit操作，复制到屏幕缓冲区当中。</span></p>
<p><img src="http://p3.itc.cn/q_70/images03/20201122/afa6b9e7c91d4302a16e6d608d1e278b.png" /></p>
<p><strong><span style="font-size: 16px;">怎么对URP内置进行定制？</span></strong><span style="font-size: 16px;"></span></p>
<p><span style="font-size: 16px;">第一， <strong>URP提供了RenderObject，</strong>它是URP默认情况下已经实现好的RenderFeature和RenderPass工具，通过这些，在不写一行代码的情况下，可以对渲染管线进行定制。我们可以明确指定某一个layer，以及layer在哪个具体的时间点进行渲染。 </span></p>
<p><span style="font-size: 16px;">我们需要在透明物体渲染之前去做RenderFeature，以及对渲染进行一些额外的设置，比如绘制涂层，需要使用哪个彩色球，或者对一些渲染状态、深度进行重载，来决定这个东西是否做深度测试；还可以设置模板缓存的方式，摄像机的参数。</span></p>
<p><img src="http://p4.itc.cn/q_70/images03/20201122/99475fa640d74832a17b5bd8a25a9837.png" /></p>
<p><span style="font-size: 16px;">在《黑暗之潮》当中， <strong>我们利用RenderObject进行了这些的操作：</strong></span></p>
<p><span style="font-size: 16px;">第一， <strong>解决地面裂纹这些透明物体的渲染。</strong>我们单独使用了RenderObject，选中了地表那一层layer，让它在透明物体之前去渲染这一整层，这样就能在所有技能特效之前去渲染地面的裂纹。 </span></p>
<p><span style="font-size: 16px;">第二，RenderObject去 <strong>辅助其他的自定义RenderPass。</strong></span></p>
<p><span style="font-size: 16px;">第三， <strong>对透明物体实现扭曲的效果。</strong>我们把复制那张ColorTexture的时机往后挪，挪到透明物体之后，并且用单独的Pass额外去渲染这些需要扭曲效果的特效，最终完成正确的渲染。 </span></p>
<p><img src="http://p2.itc.cn/q_70/images03/20201122/f6ac7eddf9254b6e8295a2880abe02e6.png" /></p>
<p><span><strong><span>RenderFeature和RenderPass的自定义</span></strong></span></p>
<p><span style="font-size: 16px;">这是URP提供给的比RenderObject更高一层级的自定义，通过RenderFeature可以做到在任意一个时间点插入自己想要的自定义的渲染操作，拥有更强的控制能力，并且可以通过手动调用CommandBuffer底层渲染接口，实现非常多的效果。</span></p>
<p><span style="font-size: 16px;">使用RenderPass的时候，可以通过操作切换RT，RenderBuffer的LoadStore操作来进行一些性能优化。</span></p>
<p><span style="font-size: 16px;">现在移动GPU里基本都采用了tile base架构， <strong>GPU有个片上内存，它所有的渲染结果直接对片上内存进行操作，而不是直接对显存进行操作，从而减少频繁读显存所带来的带宽开销。</strong>在渲染的时候我们需要提前告诉GPU，现在切换了一个RT，是否需要把RT本来保存的颜色系统首先加载到片上内存，然后再进行接下来的渲染操作。 </span></p>
<p><img src="http://p4.itc.cn/q_70/images03/20201122/53bd8d52891c46a899ac18d6017b1f81.png" /></p>
<p><strong><span style="font-size: 16px;">《黑暗之潮》项目当中利用RenderFeature做了平面阴影。</span></strong><span style="font-size: 16px;"></span></p>
<p><span style="font-size: 16px;">第一，这个阴影是一种作假的阴影渲染方式，大部分都是平地的情况下才能够使用，正好《黑暗之潮》就是这样一款游戏。</span></p>
<p><span style="font-size: 16px;">第二，这个阴影非常锐利、非常清晰，渲染质量很高，不会出现任何的锯齿。</span></p>
<p><span style="font-size: 16px;">第三，不需要额外渲染shadowmap，渲染地表的时候也不需要对shadowmap进行采样，因此整体开销要比使用shadowmap省非常多。</span></p>
<p><span style="font-size: 16px;">第四，这个效果用RenderFeature非常容易实现，直接添加一个Shadow RenderFeature，把需要有阴影的角色用特殊的shadow绘制一遍就可以。</span></p>
<p><img src="http://p1.itc.cn/q_70/images03/20201122/0858d0be8e9743479e1c2317ee42c397.png" /></p>
<p><span style="font-size: 16px;">下图是拿RenderFeature实现的 <strong>沙盘地图地块描边</strong>效果。 </span></p>
<p><span style="font-size: 16px;">这个描边需要严丝合缝对应这个区块范围，区块下半部分，墙、山体部分又不能有描边，所以没办法用传统法线往外扩的方式去渲染描边。</span></p>
<p><img src="http://p0.itc.cn/q_70/images03/20201122/675cdf78ef804652a9aa6359b4a34259.png" /></p>
<p><span style="font-size: 16px;">我们的流程： <strong>先用一个纯色去渲染地块，之后对渲染结果进行降采样，锁分辨率，在分辨率比较低的情况下，再利用BoxFilter进行模煳操作。</strong></span></p>
<p><span style="font-size: 16px;">这样做的好处，可以利用尽可能小的带宽开销来对这个结果进行模煳操作。最后将模煳完毕的结果进行升采样提高分辨率，再用透明的颜色绘制一次地块，就把中间这个区域扣除了，只剩下外面的描边，既能实现需要的描边效果，还能实现从靠近物体的部分往外慢慢渐变渐影的柔和的过渡效果。</span></p>
<p><img src="http://p0.itc.cn/q_70/images03/20201122/a9f4c4c8d00a4587919e5c6b5a8b61bb.png" /></p>
<p><span><strong><span>自定义Renderer及《黑暗之潮》最终渲染管线流程</span></strong></span></p>
<p><span style="font-size: 16px;">有一些效果或者需求必须更深层次的自定义才能够实现。在URP当中，提供了Render渲染器，它是一个抽象层，内置了两个渲染器，一个是Forward，也就是前向渲染器，另外一个是2DRenderer，一些2D游戏可能会选择这个渲染器。</span></p>
<p><span style="font-size: 16px;">最新版的URP当中，还集成了一个 <strong>defer Renderer延迟渲染器，</strong>在《黑暗之潮》中我们可以对Renderer进行寄存，通过这个实现一些通过RenderFeature做不到的事情。 </span></p>
<p><span style="font-size: 16px;">URP有一个好处，虽然要自定义Renderer，但不是所有东西必须从头开始，因为 <strong>URP里面已经实现了各种各样的Pass，可以直接使用，我们只需要对这些Pass进行重新编排，就能完成Renderer的自定义。</strong></span></p>
<p><img src="http://p7.itc.cn/q_70/images03/20201122/403a0a0080c74a648f5b78b64caa1be7.png" /></p>
<p><strong><span style="font-size: 16px;">我们对ForwardRenderer基础进行修改做到了自定义。</span></strong><span style="font-size: 16px;"></span></p>
<p><span style="font-size: 16px;">比如要做后效，不可避免对全屏所有的像素进行操作，正常情况下，如果后面还需要渲染UI，会在后效计算完毕之后渲染UI，最后通过Frame Blit复制到FramBuffer里面。</span></p>
<p><span style="font-size: 16px;">这两个过程能否合并？肯定是可以的，我们最后渲染UI的时候，把UI直接在FrameBuffer上面去进行绘制，就可以省掉最后这个Blit的操作。</span></p>
<p><span style="font-size: 16px;">这么做还有一个好处，可以把3D场景的渲染分辨率和UI的渲染分辨率分开。以前如果受制高低配，对整个渲染结果的分辨率进行降分辨率操作的话，UI也会跟着一起被降分辨率，但是UI对分辨率非常敏感，一降分辨率就肉眼可见，对游戏的品质影响很大。</span></p>
<p><span style="font-size: 16px;">经过刚才介绍的方式， <strong>3D场景在RT上面渲染，之后通过后效复制到FrameBuffer上面，UI直接在FrameBuffer上面绘制，所以UI的分辨率不受降分辨率的影响。</strong></span></p>
<p><img src="http://p1.itc.cn/q_70/images03/20201122/0f8f8fbfcf9c4264bdaa9af718985d00.png" /></p>
<p><strong><span style="font-size: 16px;">《黑暗之潮》最终渲染管线如下面流程图展示。</span></strong><span style="font-size: 16px;"></span></p>
<p><span style="font-size: 16px;">前半部分跟默认的URP没有太大的区别，主要是在渲染不透明物体之后，加入ECS模型渲染。我们还有一个Copy Depth，把不透明物体的深度给复制到一张单独的RT上面。</span></p>
<p><span style="font-size: 16px;">这个Pass不是每次渲染都会有，而是只有开启沙盘地图的时候才会用。接下来渲染地表的不透明物体，渲染所有的平面阴影以及ECS物体的平面阴影，绘制沙盘地图的描边，最后再渲染透明物体。渲染完特效再进行Copy color，把整个渲染结果复制到一张单独的RT上面。</span></p>
<p><span style="font-size: 16px;">这个RT是进行了降分辨率操作，实际上抓取的并不是全屏，大概只有1/4屏幕的分辨率的颜色信息，这个信息给类似于扭曲效果去使用，因为这些效果对分辨率的要求并不是特别高。渲染完扭曲之后，我们会对整个屏幕进行后效处理，把结果可以直接写在FrameBuffer屏幕缓冲区里面，最后再去对UI直接进行绘制，完成整个渲染流程。</span></p>
<p><img src="http://p2.itc.cn/q_70/images03/20201122/cad716cd29a2482fb21715cd5729a845.png" /></p>
<p><span><strong><span>URP性能优势及对项目的影响</span></strong></span></p>
<p><span style="font-size: 16px;">第一， <strong>URP是一个单Pass的前向渲染管线，</strong>所有的动态光照是在一个Pass里面完成计算的。通过单Pass的方式渲染，只要同场景里面同时能看见光源的数量有一个比较好的控制，就能够实现很好的渲染效果，而且开销相比多Pass光照渲染有非常大的优势。经过测试，在目前主流的终端机以上，中高端机都是没有任何问题的。 </span></p>
<p><span style="font-size: 16px;">第二， <strong>URP采用了单Pass的Color Texture去替代GrabPass。</strong>之前我们在Builtin管线里面做类似于空气扰动效果，必须要使用GrabPass，这个功能虽然非常方便简单，但有一个非常严重的问题，使用GrabPass之后没有办法预知当前渲染屏幕会被全屏抓屏几次，而且这个抓取不会降分辨率，尤其是在移动平台上面。通过单Pass的ColorTexture，就可以通过一次抓取完成所有需要扭曲操作的渲染，性能高非常多。 </span></p>
<p><span style="font-size: 16px;">第三， <strong>通过RT自定义LoadStore操作</strong>，进一步减少带宽。 </span></p>
<p><span style="font-size: 16px;">第四，可以 <strong>根据实际情况去掉一些不必要的Blit操作。</strong></span></p>
<p><span style="font-size: 16px;">最后， <strong>SRP Batcher，</strong>仅这一条就已经不能拒绝URP的使用。 </span></p>
<p><img src="http://p0.itc.cn/q_70/images03/20201122/e698f614c6be477ebffb4297825aa2f9.png" /></p>
<p><strong><span style="font-size: 16px;">SRP Batcher对项目有什么具体的影响？</span></strong><span style="font-size: 16px;"></span></p>
<p><span style="font-size: 16px;">内置管线中有三种方式进行合批，第一是Dynamic Batching，它对合批有比较严格的要求，对三角面数要求比较高，以及它是通过CPU降低DrawCall。我们降低DrawCall的目的也是为了降低CPU开销，相互意义已消。在一些特定的情况下，Dynamic Batching才能够有性能提升，绝大多数情况下没有太大作用。</span></p>
<p><span style="font-size: 16px;">第二，静态合批Static Batching，这个对降低DrawCall和提升性能都很有效，但最大的问题是它只对静态物体生效，对于动态物体没有任何效果。而且进行静态合批之后，整个场景的内存占用会提高非常多。另外，次世代的游戏场景都已经非常复杂了，LOD是一个不可或缺的功能，但Static Batching对LOD是非常不友好的。</span></p>
<p><span style="font-size: 16px;">最后就是GPU Instancing，这种方式只对网格Mesh以及Material均一致的情况下才能生效，应用范围比较窄，对于普通的物件，比如房子，场景，没有办法对它进行合批。</span></p>
<p><strong><span style="font-size: 16px;">上面三种合批方式如果用于次世代游戏有些捉襟见肘，性能方面的优化会非常的困难。SRP Batcher就能很好的解决这个问题。</span></strong><span style="font-size: 16px;"></span></p>
<p><span style="font-size: 16px;">DrawCall里面，开销最大的就是SetPassCall。SRP Batcher的原理是通过降低SetPassCall的数量来打造性能提升，通过渲染中所需要用到的参数变量拆分成若干个ConstantBuffer分别保存，比如保存的是全局的静态参数，有一些可能保存的是当前这一帧数据，剩下的一个Buffer保存的是当前这个材质球特有的参数。</span></p>
<p><span style="font-size: 16px;">这样做好处比较明显，如果说同一个Shader物体，它实际上变化的就只有模型以及材质球上的参数。至于Shader的program，以及渲染状态，这些都是不需要改变的。所以一次DrawCall基本只需ConstantBuffer的内容，再绑定一个Mesh的指针就可以完成， <strong>整个DrawCall的开销非常低。</strong></span></p>
<p><img src="http://p2.itc.cn/q_70/images03/20201122/648ce950b9a5488fb34c86ad3fbd3072.png" /></p>
<p><span style="font-size: 16px;">可以看下图的对比。左边是开启了SRP Batcher，右边没有开启。这个图是通过RenderDoc抓取的一次DrawCall渲染流程，左边绑定了一个贴图，传了一些顶点的指针，最后通过一个BannerBuffer把ConstantBuffer数据更新一下，可以直接去绘制。</span></p>
<p><span style="font-size: 16px;">但是 <strong>在不开启SRP Batcher的情况下，整个渲染流程非常的长</strong>，会进行非常多的设置，还会去更改Shader program，更改非常多的渲染状态。这个列表下面还有很长一段，通过对比列表的长度就能说明这两个DrawCall之间的性能开销差别有多大。 </span></p>
<p><img src="http://p7.itc.cn/q_70/images03/20201122/3591caf02fbd4de4bf6979914967ab49.png" /></p>
<p><span style="font-size: 16px;">我们也进行了测试。一个测试场景，有三栈动态光源，这个场景在顶配的情况下，有40W三角面，以及500dc；中配进行简化，有32W三角面和400dc；低配是25W三角面和280dc，三档机型上测试都有比较大幅度的提升。低配虽然是25W三角面和280DrawCall，实际上在Builtin的项目里面已经是一个高配才能比较流畅运行的标准了。</span></p>
<p><img src="http://p2.itc.cn/q_70/images03/20201122/59667670bd5e47d4a60b98ff1715cf97.png" /></p>
<p><span style="font-size: 16px;">看一下这个Profiler的结果，我们是在骁龙450SoC上进行的测试，这是一个非常低端的处理器。 <strong>我们的主线程Render Camera是4.3毫秒，在下面渲染线程Camera的开销是14毫秒。</strong></span></p>
<p><img src="http://p1.itc.cn/q_70/images03/20201122/5f4183b6a5c944669e3ed0c6fafc8d9b.png" /></p>
<p><span style="font-size: 16px;">把SRP Batcher关了之后，相同的场景，一模一样的东西，同样的视角，主线程的Render Camera的开销已经直接涨到7.8毫秒，渲染线程开销就已经达到了22毫秒。22毫秒相当于说，只有场景，没有任何的技能特效，没有其他的角色，也没有任何的业务逻辑，就已经不大能跑30帧了。</span></p>
<p><img src="http://p1.itc.cn/q_70/images03/20201122/09d1c4fa59d74f029e1a7b22a9978c80.png" /></p>
<p><span><strong><span>DOTS技术栈在《黑暗之潮》的运用</span></strong></span></p>
<p><span style="font-size: 16px;">接下来分享一些关于DOTS技术栈在商业上的运用。</span></p>
<p><img src="http://p9.itc.cn/q_70/images03/20201122/e3d3189ec7b549b9817d5dcc59d51b7f.png" /></p>
<p><strong><span style="font-size: 16px;">大多数的开发者都有一些常见的误解，对于DOTS技术栈，</span></strong><span style="font-size: 16px;">非常多的人说，我们在项目里面没有用到多线程，所以也不需要用DOTS。或者DOTS必须用于大规模的集群模拟才能带动比较大的提升。另外大家觉得使用ECS的代价非常高，因为ECS是一个全新的东西，把现在的项目转换成ECS，代价非常的高，可能也就用不上DOTS。这三个都是多多少少是一些误解。</span></p>
<p><img src="http://p7.itc.cn/q_70/images03/20201122/faf5419c4ed84e7e83841be39cece85b.png" /></p>
<p><span style="font-size: 16px;">首先需要了解一下DOTS具体是什么？</span></p>
<p><strong><span style="font-size: 16px;">DOTS实际上叫Data-Oriented Tech Stack，实际上就是面向数据的开发栈，主要由三个组件组成，ECS、JobSystem、Burst。这三个组件可以相互独立使用，任意选择其中一个，用于不同的应用场景。</span></strong><span style="font-size: 16px;"></span></p>
<p><span style="font-size: 16px;">如果说需要使用JobSystem，你可以在ECS里面用，也可以不在ECS里面用，只要是需要并行计算的地方都可以使用。Burst也一样，不需要配合ECS使用，不需要跟并行计算捆绑使用，它的作用仅仅是对于一些复杂的计算进行编译器优化，来达到性能提升。只要是计算密集型的东西，都可以使用Burst，同步方法也是可以的。</span></p>
<p><span style="font-size: 16px;">关于ECS，大家会觉得所有东西都可以用ECS来写，会想UI的业务逻辑怎么用ECS实现。大可不必。 <strong>用ECS不是所有东西全部都要用ECS来做，而是可以根据项目需求选择其中适合那部分来用ECS去写，剩下的可根据项目需求将ECS和传统OOP组合使用。</strong></span></p>
<p><img src="http://p7.itc.cn/q_70/images03/20201122/3b3ecfdbbcd841c486697378d61efd63.png" /></p>
<p><span style="font-size: 16px;">给大家看一下我们 <strong>在《黑暗之潮》中利用ECS的例子。</strong></span></p>
<p><span style="font-size: 16px;">我们 <strong>通过ECS渲染了大量的怪物。</strong>《黑暗之潮》游戏里面怪物通常有一个特点，一组怪由几名精英配合一两种大量存在的爪牙组成，如果用默认的SkinMeshRenderer，就没有办法合批，画面上面有多少个怪就有多少个DrawCall，Animator开销不小，GameObject.Instantiate开销也比较大，如果同时刷出来三四十只怪的话，肯定会卡顿。 </span></p>
<p><img src="http://p0.itc.cn/q_70/images03/20201122/721c59c62cf34eca8ae4d979d2d224c0.png" /></p>
<p><strong><span style="font-size: 16px;">使用ECS，先把整个动画信息烘焙到一张动画贴图上，在GPU当中进行蒙皮操作，再通过JobSystem和Burst实现视锥剔除和动画系统的更新，最后再用传统OOP游戏逻辑控制ECS的Enity就可以。</span></strong><span style="font-size: 16px;">ECS的部分只是提供渲染和动作的结构，其他部分业务逻辑还是完全用面向对象去实现的，各取所长。</span></p>
<p><img src="http://p4.itc.cn/q_70/images03/20201122/61a9fc7d0fa540c49c0a32b559e836aa.png" /></p>
<p><strong><span style="font-size: 16px;">ECS最大的好处就是性能。</span></strong><span style="font-size: 16px;">因为我们采用了GPU蒙皮，整个DrawCall的数量下降到有几种怪就是几个DrawCall。实例化也非常快，ECS基本上就是无感的，即便同时刷一千只怪也不足1毫秒，借助Burst力量类似于视锥剔除这些计算量比较大的操作，在低端机上也是可以忽略不计的。</span></p>
<p><span style="font-size: 16px;">通过ECS，画面上怪物的渲染完全取决于GPU本身的渲染性能，CPU的开销完全不需要去考虑，也不会出现卡顿。</span></p>
<p><img src="http://p3.itc.cn/q_70/images03/20201122/3c4d775325144cdfa69942236d9e4287.png" /></p>
<p><strong><span style="font-size: 16px;">我们通过Jobsystem实现了怪物击飞的效果。</span></strong><span style="font-size: 16px;">怪物被打下悬崖，如果碰到墙壁必须要被墙壁挡下来，需要进行一些物理运算，如果直接使用Unity的Ragdoll系统，它的物理计算非常复杂，对于低端机会造成比较大的性能负担。我们把这个过程简化了，所有的怪物在被击飞的时候，使用的是预先制作好的动画，只需要计算它的运行轨迹就行了。</span></p>
<p><span style="font-size: 16px;">我们首先用Job去并行计算怪物的分析轨迹，再通过Unity提供的多线程Raycast方法去进行射线检测来判断它是否撞到墙或者碰到地面。最后如果还有一些非ECS对象，可以在计算完毕之后通过一个单独的Job把所有GameObject的位置同步一下。</span></p>
<p><img src="http://p4.itc.cn/q_70/images03/20201122/127fd2b523774b96adeac799b87eeabc.png" /></p>
<p><strong><span style="font-size: 16px;">我们通过Burst实现了射线技能。</span></strong><span style="font-size: 16px;">这个看上去很简单，实际上需要对整个场景以及所有的怪物和其他对象产生交互，射线打到墙上能够实时产生反映，需要每帧对整个场景进行射线检测，整个计算过程开销比较大。</span></p>
<p><img src="http://p8.itc.cn/q_70/images03/20201122/85dbd7b3eaff409a969bac11339e81e5.png" /></p>
<p><span style="font-size: 16px;">通过Burst我们把这个做成了一个Job，通过Job.Run的方法直接进行调用。</span></p>
<p><span style="font-size: 16px;">另外这个技能有大量的子弹，子弹需要进行运行轨迹的计算，通过Burst非常有效地把这两个计算开销降的非常低，性能提升基本能上百倍，结合Job.Run的方式实现同步调用，我们在整个计算流程中不需要开额外的线程，直接在当前线程，单个静态方法直接调用。</span></p>
<p><img src="http://p3.itc.cn/q_70/images03/20201122/51ef70226ace4fe79adb681de266a26f.png" /></p>
<p><span style="font-size: 16px;">可以看一下 <strong>开启和不开启Burst效果的差别</strong>，左边是开启，右边是不开启。在一个计算体系化模型工具中测试，左边只用241毫秒，右边用了20毫。如果算总耗时，左边用了143秒，右边只用了1秒钟，把所有线程的时间加起来，就是 <strong>100倍的差别</strong>，效果非常明显。 </span></p>
<p><img src="http://p3.itc.cn/q_70/images03/20201122/6dc8aa886f8b403faca159c246c8de83.png" /></p>
<p><span><strong><span>工作流的简化和改善</span></strong></span></p>
<p><span style="font-size: 16px;">随着我们采用PBR流程，Prefab的制作就会比较麻烦，而且以往Prefab的制作都是交给美术同学，美术需要把模型导入Unity，再规范创建材质和Prefab。</span></p>
<p><span style="font-size: 16px;">在采用PBR流程之后，这个创建过程就会麻烦了非常多，贴图多了很多张，跟各式各样的PBR的设置是非常繁杂的。尤其是ECS的单位，需要对动画进行烘焙，非常的耗时，而且容易出错。</span></p>
<p><img src="http://p4.itc.cn/q_70/images03/20201122/7aa913ffb8254309b700026b512c396b.png" /></p>
<p><span style="font-size: 16px;">为了解决这个问题， <strong>我们引入了AssetGraph，这个工具是一个节点式的自动化资源导入流程的工具</strong>。通过自定义节点，可以完全根据项目的需求对资源的导入进行自定义，然后一键创建所有角色的Prefab，美术就能从工作中解放出来，只需要做完了之后把FBX和贴图文件放到指定的目录下。 </span></p>
<p><img src="http://p8.itc.cn/q_70/images03/20201122/624802f34b9b4393b9bb3f4edd334c88.png" /></p>
<p><span style="font-size: 16px;">导出场景的时候，有时需要 <strong>对渲染物件进行渲染设置</strong>，来达到最佳的渲染性能。具体的设置方式是技术团队根据Profiling的结果进行不断的迭代和调整，才能形成一个调整的方案。每一次调整，都需要去修改美术资源，整个工作量非常大。 </span></p>
<p><span style="font-size: 16px;">为了提升切换场景的加载速度，需要 <strong>对场景进行切块和分簇，</strong>可以从右边的截图看到，这些蓝绿色的盒子就是我们分簇切块之后的结果，它所展示的分块Bounding Volume。 </span></p>
<p><img src="http://p0.itc.cn/q_70/images03/20201122/bfa7ac86a0f643a28655042d526c1634.png" /></p>
<p><span style="font-size: 16px;">结合整个场景的导出流程，按照流程图的方式做。</span></p>
<p><span style="font-size: 16px;">第一步，检查美术设置的LOD的选项是否正确，把美术临时物件剔除，检查一些碰撞Fix Mesh Collider ReadWrite设置是否正确，把LOD的点面工具的临时脚本给删掉，然后对ShadowMask进行一些设置。</span></p>
<p><span style="font-size: 16px;">因为URP里面没有shadowMask，所以需要根据Prefab的结果去进行一些详细的设置，比如Instancing的设置该怎么设？哪些物体适合Instancing，哪些不适合，我们都会设置。另外，也对整个场景进行分簇，看哪些物体适合Static Batch进行一些选择。</span></p>
<p><span style="font-size: 16px;">剩下一些物体，适合转换成ECS hybrid方式渲染，会转换成hybrid，最后再把每一个簇进行Bounding Volume计算，完成整个场景流程的导出。</span></p>
<p><img src="http://p7.itc.cn/q_70/images03/20201122/6849dc01c19b471daf7a8957ae530aca.png" /></p>
<p><span style="font-size: 16px;">场景导出完毕之后，整个场景就是一个空场景的状态，里面只剩下错的节点，我们就会进入这个范围之后再进行动态加载，下图就是我们生成的每一簇的Prefab以及静态合并的Mesh。</span></p>
<p><img src="http://p5.itc.cn/q_70/images03/20201122/792d88395c164ee893ec1038dfaa414c.png" /></p>
<p><span style="font-size: 16px;">以上就是本次分享的全部内容。</span></p>