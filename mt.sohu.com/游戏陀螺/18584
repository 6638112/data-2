➜苹果新政出台：年收入低于百万美元开发者，佣金下调至15%
http://www.sohu.com/a/432747438_204728	52173
<p><span style="font-size: 16px;">11月18日，苹果公司宣布推出全新“佣金”政策：</span><span style="font-size: 16px;">开发者在苹果App Store应用商店年收入低于100万美元（扣除佣金后）其佣金将被降至15%，与之前30%佣金相比降了一半。</span><span style="font-size: 16px;">这项计划将于2021年1月1日正式启动。</span></p>
<p><img src="http://p9.itc.cn/q_70/images03/20201118/f9316565a5fa4fb782cebab984eb3e39.png" /></p>
<p><span style="font-size: 16px;">苹果将在12月初公布新计划的详细细节。不过，目前看参与标准已经非常明晰。</span></p>
<p><span style="font-size: 16px;">2020年所有App总收益最高达到100万美元的现有开发者，以及新加入App Store的开发者，可以参与本计划并享受降低的佣金费率。若参与的开发者收益超过了100万美元的额度，则标准的佣金费率将适用该年度的剩余时间。假使开发者的业务收益在未来的日历年未达到 100 万美元，则他们可以在次年重新获得享受 15% 佣金的资格。</span></p>
<p><span style="font-size: 16px;">而针对销售数字商品和服务且收益超过100万美元 (指开发者扣除佣金后的收入) 的App，App Store的标准佣金费率仍为30%。</span></p>
<p><span style="font-size: 16px;">这并不是苹果第一次降低某些开发者的佣金费率。该公司最近的一次重大调整发生在2016年末，当时其首次允许订阅服务保留额外15%的收入，前提是订阅者通过iOS应用注册超过12个月。</span></p>
<p><span style="font-size: 16px;">苹果公司表示，“绝大多数”iOS应用程序开发者应该能够从这个新计划中受益，但苹果拒绝透露其2800万注册应用程序开发者中有多大比例将获得豁免资格。苹果也拒绝具体说明其应用商店收入中有多少会受到佣金减少的影响。</span></p>
<p><span style="font-size: 16px;">苹果在声明中称：“每周，苹果应用商店都会有5亿访问者使用180万个应用，自应用商店推出以来，小企业始终是它前进的驱动力。今天，苹果推出了新的佣金结构，旨在支持小型开发商和个人开发者，并刺激下一代应用的创新。”</span></p>
<p><span style="font-size: 16px;">游戏陀螺认为，2020年由于疫情以及国际形势的动荡，开发者正面临着极大的压力，甚至有不少开发者已经“退出赛道”。在这种情况下，苹果作为游戏生态的重要一环，也在思索着如何帮助开发者渡过难关，此次新政的诞生，正是苹果的解决方案。佣金的下调，意味着开发者将有更多资源，可以用于投资和发展在App Store生态系统中的业务。</span></p>
<p><span style="font-size: 16px;">但另一方面，从最近苹果的局势来看，苹果与开发者之间存在一定的矛盾，包括欧洲对苹果应用商店和苹果支付服务Apple Pay展开反垄断调查、Epic game与苹果公司的官司纠纷等。这些案例也在一定程度上影响了中小开发者对苹果的印象。因此，游戏陀螺认为，此次苹果公司也希望能以此修复与开发者之间的关系。</span></p>
<p></p>
➜爆料！完美世界或已拿下“天龙八部”IP
http://www.sohu.com/a/432747651_204728	52173
<p><span style="font-size: 16px;">今天笔者收到圈内人士爆料，称完美世界或已拿下“天龙八部”IP新游发行权，游戏研发方名为北京阅龙智娱。</span></p>
<p><span style="font-size: 16px;">收到消息后，笔者马上查询了阅龙智娱这家公司，公司官网首页展示了两款自研项目，分别是代理给三七的《浮生妖绘卷》以及此次爆料由完美发行的《新天龙八部手游》。</span></p>
<p><span style="font-size: 16px;">此前，提到天龙IP游戏圈内第一反应是畅游，所以此次阅龙智娱和完美拿到“天龙”IP的产品也比较让人意外，阅龙智娱官网还特别注明了“金庸正版授权”。</span></p>
<p style="text-align: center;"><img src="http://p8.itc.cn/q_70/images03/20201118/57a5e4e7ad164940a8f21ac91df3fb99.png" /></p>
<p><span style="font-size: 16px;">官网信息显示，阅龙智娱拥有自主游戏开发引擎，核心成员来自畅游、完美、网易、西山居、腾讯等知名厂家。据了解，《新天龙八部》研发团队由畅游创始团队领衔，第一代《天龙八部》原班研发人马操刀。目前官方仅公布了一张《新天龙八部》的宣传KV，鉴于此前市场上“天龙”IP产品数量并不多，这款产品能否刷新同IP游戏体验值得期待。</span></p>
<p><span style="font-size: 16px;">更值得关注的是，笔者在查询阅龙智娱公司信息的时候，在搜索页发现了完美世界的名字，点开企查查相关信息页后发现，早在今年8月份完美世界就已完成对阅龙智娱的投资，目前持有天津阅龙智娱35%股份，大大增加了完美世界发行该游戏信息的准确性。</span></p>
<p style="text-align: center;"><img src="http://p8.itc.cn/q_70/images03/20201118/dc70d371ef91418c90a5cce95667ee6a.png" /></p>
<p><span style="font-size: 16px;">众所周知，武侠MMO一直是完美的强项，媒体报道《新笑傲江湖》在上半年取得了首月流水4亿、3月流水破10亿的成绩。伽马数据显示上半年完美世界在移动游戏MMORPG细分市场中获得了22.5%的市场份额，</span></p>
<p><span style="font-size: 16px;">从市场层面来看，2020年的MMO领域武侠题材表现不凡，包括完美《新笑傲江湖》、腾讯《天涯明月刀》在内的大厂武侠IP都获得了成功，武侠大IP的生命力仍然旺盛，拥有较大的市场挖掘空间。</span></p>
<p><span style="font-size: 16px;">目前完美已拥有包括《笑傲江湖》、射雕三部曲《神雕侠侣》《射雕英雄传》《倚天屠龙记》在内的金庸武侠IP。同时拥有《诛仙》、《仙剑奇侠传》等在内的仙侠IP。“天龙”IP的加入或许是完美的武侠IP布局的最新一步。</span></p>
<p><span style="font-size: 16px;">截至发稿前，完美未对代理天龙新产品的消息发表评论。</span></p>
<p></p>
➜金山软件Q3游戏营收7.88亿元，《卧龙吟》等手游推至2021年发行
http://www.sohu.com/a/432747908_204728	52173
<p><strong><span style="font-size: 16px;">导读：</span><span style="font-size: 16px;">本季度，《剑网</span><span style="font-size: 16px;">3》依然是金山软件游戏营收的主力军。</span></strong></p>
<p><span style="font-size: 16px;">近日，金山软件有限公司（以下简称：金山软件）公布了第三季度财报。期内，公司营收达13.97亿元（人民币，下同），同比增长34%，净利润6.67亿元，同比增长1749%，每股基本盈利0.49元，同比增长1533%。整体表现较为不错，其中，净利润的增长主要系公司出售了金山云部分资产，获得投资收益3.68亿元。</span></p>
<p><img src="http://p0.itc.cn/q_70/images03/20201118/476cc6bfb9a149b788cc47f3cfa38f52.png" /></p>
<p><span style="font-size: 16px;">金山软件主席雷军在财报中表示，公司在第三季度保持稳定发展，“公司该季度取得的成绩，主要得益于市场对金山办公集团的认可度持续上升，以及公司对精品游戏的持续创新。”</span></p>
<p><span style="font-size: 16px;">金山软件CEO邹涛则称，虽然受疫情影响，但公司Q3的总收入达13.97亿元，同比增长34%，体现强劲的韧性。</span></p>
<p><span style="font-size: 16px;"><strong>游戏营收同比增长19%至7.88亿元，办公软件服务与游戏收入占比差缩小</strong></span></p>
<p><span style="font-size: 16px;">财报显示，金山软件的营收主要来源于网络游戏和办公软件及服务及其他两项，本季度前者营收7.88亿元，较上年同期增长19%，较上季度下降9%；后者贡献了6.09亿元，较上年同期增长59%，较上季度增长11%。</span></p>
<p><img src="http://p8.itc.cn/q_70/images03/20201118/356778f8273f4d68b884fa2ffbb8f146.png" /></p>            <div class="lookall-box">
<div class="lookall-shadow"></div>
<section class="lookall">
<a href="javascript:;" class="show-all" id="showMore">
<em>展开全文</em>
</a>
</section>
</div>
<div class="hidden-content control-hide">
<p><span style="font-size: 16px;">在占比上，这两项业务占总收入的比重差距正在逐渐缩小。网络游戏业务占比从上一季的61%下降至56%，办公软件及服务及其他的占比则从39%提升至44%。原因在于办公软件业务营收呈现高增长，而游戏增长放缓。金山软件在财报中称，三季度，办公软件业务中政府业务的集中提前释放，为公司带来了强劲增长。</span></p>
<p><span style="font-size: 16px;">具体来看，游戏方面，本季度，金山软件旗下游戏子公司西山居推出了《风暴魔域2》《剑侠情缘2：剑歌行》和《剑网3：指尖对弈》3款新游戏。目前《剑网3：指尖对弈》在中国iOS游戏免费榜中排名第20名，TapTap评分为7.3分，好游快爆评分7.2分。</span></p>
<p><img src="http://p7.itc.cn/q_70/images03/20201118/d8c5db0ec7a84c12bc99b57cae8e5816.png" /></p>
<p><span style="font-size: 16px;">由于新游的收益递延至下一季度，本季度金山软件的游戏收益依然来自老游戏《剑网3》。金山软件首席执行官邹涛在财报中表示，第三季度内，网络游戏业务的收入同比增长19%，主要得益于旗舰端游《剑网3》的持续增长。</span></p>
<p><span style="font-size: 16px;">据邹涛介绍，今年10月，《剑网3》推出年度资料片《奉天正道》，该资料片新赛季及新游戏内容均给玩家带来不错的游戏体验。国信证券发布研究报告认为，得益于《剑网3》新资料片，金山软件今年PC游戏的收入将超越历史峰值（2017年）。</span></p>
<p><span style="font-size: 16px;"><strong>研发成本增加，《卧龙吟》《最终幻想》等新游推至2021年发行</strong></span></p>
<p><span style="font-size: 16px;">新游方面，国信证券称，今年金山软件游戏较去年有了长足的进步，但部分重量游戏没有达到此前的乐观预期。“《剑侠情缘2：剑歌行》于今年8月上线，上线首日即登顶iOS免费榜，但随着后续运营的观察，低于公司此前的预期。”</span></p>
<p><span style="font-size: 16px;">在新游自研方面，本季度，金山软件加大了研发的投入。财报显示，期内公司研发成本净额为4.84亿元，同比同期增长25%。原因在于公司持续加大对新产品及服务以及科技创新的投入，员工人数以及员工相关开支增加。</span></p>
<p><img src="http://p0.itc.cn/q_70/images03/20201118/a72230af125247f785e2f851c7af5cab.png" /></p>
<p><span style="font-size: 16px;">据了解，今年金山软件旗下子公司西山居曾在公开场合透露其6款在研游戏新品，涵盖了二次元、自走棋、模拟养成、射击类以及MMO多个品类。目前其自研的三国题材SLG手游《卧龙吟2》已确定交于腾讯代理，后续发行情况值得期待。</span></p>
<p><span style="font-size: 16px;">对于未来新游发展，金山软件在业绩会上也称，《卧龙吟》《最终幻想》等游戏将要推迟到明年Q1发行，其中《最终幻想》要视版号批复而定。而由于金山软件推迟部分手游的发行，国信证券将金山软件2020年的游戏收入从30%的同比增速调低至18%。</span></p>
➜米哈游技术总监详解《原神》画面效果的技术实现
http://www.sohu.com/a/432748127_204728	52173
<p><span style="font-size: 16px;">11月17日，中国Unity线上技术大会游戏专场迎来米哈游技术总监弋振中的分享，此次他围绕“从手机走向主机-《原神》主机版渲染技术”为主题，细致地讲解了《原神》在主机上渲染技术实现的重点内容。 </span></p>
<p><img src="http://p8.itc.cn/q_70/images03/20201118/7b720860fe8644da94eac122b0cc76e6.png" /></p>
<p><span style="font-size: 16px;"><strong><span style="font-size: 16px;">以下是演讲内容（有节选）：</span></strong></span></p>
<p><span style="font-size: 16px;">大家好！我叫弋振中，目前负责《原神》的主机平台开发。首先我简单介绍一下《原神》的游戏，《原神》是开放世界的RPG游戏，有独特的二次元画风，是跨平台的，而且长期运营，长期更新。</span></p>
<p><span style="font-size: 16px;">今天的内容安排大致是：首先我会介绍一下《原神》主机平台的基本情况，然后按照我们开发的时候改造渲染管线的思路，选择部分的技术点进行更深入的分享，希望从渲染的角度，让大家对于我们如何将《原神》带到主机平台有大致的了解。最后是一点我个人的开发体会。</span></p>
<p style="text-align: center;"><img src="http://p0.itc.cn/q_70/images03/20201118/f5ec87c933f545a594d420bea6e2e7c5.png" /></p>
<p><span style="font-size: 16px;">下面是主机渲染管线的简介。首先，Unity是我们游戏里面使用的引擎。Unity是一个灵活度很高的引擎，代码风格很简洁，所以我们能够更方便地定制化开发《原神》的渲染管线。同时我们有非常强大的引擎团队，在Unity上面为《原神》进行了深度的开发。</span></p>            <div class="lookall-box">
<div class="lookall-shadow"></div>
<section class="lookall">
<a href="javascript:;" class="show-all" id="showMore">
<em>展开全文</em>
</a>
</section>
</div>
<div class="hidden-content control-hide">
<p style="text-align: center;"><img src="http://p3.itc.cn/q_70/images03/20201118/e80c3b7cabd4412ea96ee0f5da04d103.png" /></p>
<p><span style="font-size: 16px;">我们在主机平台和手机平台采用的是不同的渲染管线，但是游戏的基调是一致的，都是基于PBR的风格化渲染。另外《原神》的主机平台开发起步时间稍晚于手机平台，在平台管线搭建好以后就进入了同步开发的节奏。资源的制作、功能的开发多方面都需要兼顾到多个平台的情况。</span></p>
<p><span style="font-size: 16px;">基于PBR，是为了让整个大世界的光影效果保持统一，因为我们的光影都是实时计算的，有24小时的循环，有动态的天气系统。PBR能够确保不会在不同的光照条件下出现脱离预期的渲染效果。作为风格化的游戏，也需要根据美术的需求修改不同的材质。</span></p>
<p><span style="font-size: 16px;">《原神》在PS4上的分辨率是这样设置的：PS4 pro上面是原生的4K分辨率，在PS4的base，我们把1440P作为我们的渲染分辨率，最后是输出到1080P上面，这样我们得到的最终后面会更加清晰，也会更加锐利。作为《原神》为主机开发的功能，大量使用了compute shader，compute shader有很多不错的特性，而且在支持Async compute管线的平台上，我们还能够进一步节省开销。</span></p>
<p><span style="font-size: 16px;">《原神》的风格化渲染是非常独特的，因此美术对于图形功能的要求也和写实类游戏不一样，尤其是光影效果，大家可以看到脏、黑、死、焦、噪这些词都频繁地出现了美术和程序的沟通当中。</span></p>
<p style="text-align: center;"><img src="http://p3.itc.cn/q_70/images03/20201118/5958fd0dc10142839eae54c506463faa.png" /></p>
<p><span style="font-size: 16px;">下面我们提到的所有的技术，都经历了很长的磨合期，有一些甚至还在磨合当中。在经历了反复的打磨和修改， <strong>直到美术对最终效果满意，程序对最终实现方案的性能也满意的情况下，我们才会大规模铺开制作</strong>。 </span></p>
<p><span style="font-size: 16px;">接下来再介绍具体的功能之前，我跟大家讲一下在PS4平台刚开始开发的时候，我们面临的一个状况是，有时候项目在做平台切换时，在实现的时候没有考虑到主机平台的特性。再加上各种为PS4开发的图形和游戏功能的计划，这都意味着大量的工作量。</span></p>
<p><span style="font-size: 16px;">另外还有TRC、索尼账号等等一系列PS4独有的问题需要解决，工作量和工作难度都非常大，然而我们能够给主机开发的资源又很有限。一开始的主机团队就我一个人，光杆司令。为了全球同步上市，留给我们开发的时间大概只有一年半，一年半的时间要让一个平台从无到有，还要达到一定的品质，这期间还要准备ChinaJoy、TGS等展会，能够顺利地完成这一切，真的是非常感谢《原神》的整个开发团队的努力，非常的不容易。</span></p>
<p><span style="font-size: 16px;">下面讲一下我们在渲染管线上做改动的一些思路，因为开发的时间很紧，所以在选择技术改造点的时候，遵循下面几个原则。</span></p>
<p style="text-align: center;"><img src="http://p0.itc.cn/q_70/images03/20201118/339ba76ba5c84539b946dcac2aec3941.png" /></p>
<p><span style="font-size: 16px;">第一个是关于功能的选择，我们首先 <strong>排除掉开发周期长的，需要过多地前期研究的功能。</strong></span></p>
<p><span style="font-size: 16px;">然后根据游戏的美术风格，我们 <strong>选择一些对于画质的帮助更大的地方去做提升</strong>。另外因为时间不多，所以我们希望新加的功能能够更多地发挥作用，所以最好是能够在相互之间产生互动，这样会显得画面更加系统化，得到的画质提升也会有1+1&gt;2的效果。 </span></p>
<p><span style="font-size: 16px;">下面就是我们做一些 <strong>技术点的解析</strong>。 </span></p>
<p style="text-align: center;"><img src="http://p1.itc.cn/q_70/images03/20201118/db5d40c80e95421ebd7e659868660502.png" /></p>
<p><span style="font-size: 16px;">首先我们从场景的光影方面选择了几个技术点，主要是侧重方法，会稍微涉及到一些优化思路。第一个是关于方向光的阴影，《原神》的大量游戏时间是在室外，室外方向光的阴影质量非常重要。一方面近处的阴影细节需要更加细腻，才显得画面更干净；另外一方面是阴影覆盖范围需要足够大，因为游戏的可视距离非常远，阴影范围是800米。</span></p>
<p><span style="font-size: 16px;">大家可以看一下这张贴图，即使在远处墙壁上一小片的绿植产生的阴影，在放大之后都能够看到树叶的轮廓。这个地方放大之后，能够看到树叶轮廓，而且非常稳定。整体上我们对于《原神》的方向光阴影的质量是比较满意的。</span></p>
<p style="text-align: center;"><img src="http://p3.itc.cn/q_70/images03/20201118/872eb11c3ac244cd87ed91af61933e4a.png" /></p>
<p><span style="font-size: 16px;">我们阴影的技术还算是比较常规，使用了Cascaded shadow map 加上基于Poisson disc的soft shadow，我们游戏没有使用通常的4级cascades，而是用了8级，这属于大力出奇迹的方式。大力出奇迹带来了更好的阴影效果，当然也带来了更多的性能开销。更多的drawcall会带来CPU开销，更多的cascades会带来GPU的开销。我们把质量提升上去之后，会想办法来解决性能问题，那我们怎么去做的呢？</span></p>
<p style="text-align: center;"><img src="http://p4.itc.cn/q_70/images03/20201118/93218488397149159735b06a18b5a853.png" /></p>
<p><span style="font-size: 16px;">首先在CPU端，我们做了一个shadow cache，8级cascades的前4级我们每帧都更新，后面4级是采用轮流更新的方式，确保每8帧所有的cascades都能至少更新一次。每一帧的话，我们只更新5级cascades。</span></p>
<p><span style="font-size: 16px;">主要的工作量其实在GPU端，用了8级cascades以后，我们的screen space shadow map的开销长期是大于2毫秒的，在某些情况之下能够超过2.5毫秒。GPU比4级cascades的情况下，爆涨了0.5到0.8毫秒。</span></p>
<p><span style="font-size: 16px;">我们的软阴影采用的是泊松分布的采样，而且每个像素会去做一个旋转，来消除重复的pattern，这一整套的操作都是很重量级的。但是我们仔细想一想，真的需要对每个像素都要做这么多操作吗？所以我们的优化思路是 <strong>尽量只在必要的地方做软阴影计算。此外我们会生成一张Mask贴图，在贴图里面标出阴影、半影和非影片区。阴影区和非阴影区只需要直接返回0和1就好了，只有在半影区才会去计算软阴影，通过这种方式，我们的GPU开销大致减少了30%左右。甚至比采用4级cascades还要再快一些。</strong></span></p>
<p><span style="font-size: 16px;">大家可以看一下这张图，图里面被红色标注的区域，就是我们的半影区，这个是需要我们去做软阴影处理的区域。其他的区域，就是在阴影区域或者是非阴影区域，我们直接返回0和1就好了。大家可以看出来，绝大部分的像素都可以去掉软阴影计算这个繁琐的步骤。</span></p>
<p style="text-align: center;"><img src="http://p9.itc.cn/q_70/images03/20201118/1e4667b89c884d9fa622835b096b4cd2.png" /></p>
<p><span style="font-size: 16px;">这张神奇的Mask贴图是怎么生成的呢？ <strong>这张Mask贴图的分辨率是屏幕分辨率的1/4×1/4，也就是说一个Mask值对应的是一个4×4的block。然后我们对4×4的block里面的每一个像素，来判断它是不是在阴影中，最后汇总成一个阴影、半影和非阴影的三个状态，保存到Mask贴图里</strong>。这样我们能够得到一个准确的半影信息，但是它不够快，所以我们做了进一步的优化， <strong>只选择4×4这个block里面很少的几个像素，来判断是不是在阴影当中。</strong></span></p>
<p style="text-align: center;"><img src="http://p7.itc.cn/q_70/images03/20201118/38e2f4a423614e60b32e052a7cb158c1.png" /></p>
<p><span style="font-size: 16px;">这几个像素的判断结果，就代表了整个block的信息，显然这样会出现一些误差，因为我们是拿几个少数几个像素的结果来代表整个block，所以我们把这样计算得到了Mask贴图做了模煳处理，让半影的区域稍微扩散出去。整个Mask贴图的生成，包括模煳处理大概的开销是在0.3毫秒左右。优化出来的效果非常好，肉眼可以说是看不出任何的区别。这样优化完之后，我们的GPU开销时间大概稳定在 <strong>1.3到1.7毫秒</strong>。 </span></p>
<p><span style="font-size: 16px;">把阴影搞好以后，下面我们来看看 <strong>AO（Ambient Occlusion环境光遮蔽）</strong>。大家可以考虑一种情况，就是人物和场景的物体都已经处在山或建筑物的阴影当中，这个时候人物和物体的投影跟山和建筑的投影是融为一体的。这种情况之下，画面缺乏对比，人和物体就会显得浮空。为了解决这个问题，我们在游戏里面采用了多种的AO技术，针对不同的情景生成不同的AO。 </span></p>
<p style="text-align: center;"><img src="http://p7.itc.cn/q_70/images03/20201118/d865308fe59b4f65ab4e92f2141efc72.png" /></p>
<p><span style="font-size: 16px;">首先我们使用了HBAO，这是一个比较常规的实现，能够提供一些比较细节的AO效果。同时我们对静态物体和动态物体分别采用了AO Volume和Capsule AO这两种技术。</span></p>
<p><span style="font-size: 16px;">下面这个是AO Volume的开关情况，大家可以重点看一下我们在红圈里面的区域。椅子对地面产生了柔和的投影，在我们打开AO volume的情况下。</span></p>
<p><img src="http://p4.itc.cn/q_70/images03/20201118/92290008392e4fe684dcddc060c94598.png" /></p>
<p><img src="http://p2.itc.cn/q_70/images03/20201118/bed529416af24e8697ddbbf02f1173c3.png" /></p>
<p><span style="font-size: 16px;">和HBAO相比，AO Volume能够产生更大范围的AO。它可以针对类似桌子或者椅子产生大面积AO。因为技术原理和性能的限制，HBAO是没办法产生这种效果的。AO Volume这个时候就体现很好的补充，要实现AO volume，首先我们是在离线的时候对需要产生AO volume的物体做一个遮挡信息的计算。这个计算是在物体的本地空间（Local space）去做的，生成的遮挡信息我们保存下来，在运行的时候注入到volume texture中去使用。这个技术在2012年GDC关于《InFamous 2》的讲座上有提到过，大家有兴趣可以去看一下。</span></p>
<p style="text-align: center;"><img src="http://p9.itc.cn/q_70/images03/20201118/45ec611d3ef844b490f8ee582442a9fb.png" /></p>
<p><span style="font-size: 16px;">下面是关于Capsule AO的对比图，大家可以重点看一下屏风和地面，被我们红色的圈给圈出来的区域。大家可以看到相邻在屏风和地面，能够产生出能够反映体形和人影的投影。而且如果在游戏中大家去观察的话，随之相邻动作的改变，阴影的形状也会随之产生变化。</span></p>
<p><img src="http://p4.itc.cn/q_70/images03/20201118/9cf5be5a82684fc889b9906f94f96412.png" /></p>
<p><img src="http://p7.itc.cn/q_70/images03/20201118/2b3d0d5b5b3442bf877c1d7a2a27a182.png" /></p>
<p><span style="font-size: 16px;">我们前面提到AO Volume主要是针对静态物体的，因为遮挡信息是通过离线计算的方式保存下来。像角色这种带骨骼动画的，是不能采用这种方式的，因为形状是不停地在发生变化。Capsule AO的做法就是用一些胶囊体包裹住人物的四肢和躯干，这些胶囊体和角色的骨骼动画绑定进行同步更新。然后这些胶囊体会被用来做遮挡计算，计算的时候我们把它分为无方向的环境遮挡计算，以及带方向的遮挡信息计算。带方向的遮挡信息计算采用的方向是主光源方向和法线进行混合之后得到的虚拟遮挡方向。通过这种方式，角色可以同时在周围的墙和地面等投出多个阴影。</span></p>
<p style="text-align: center;"><img src="http://p4.itc.cn/q_70/images03/20201118/ecebd6df5edf4803bbbeca2022d5c09e.png" /></p>
<p><span style="font-size: 16px;">下面是一个关于 <strong>AO的优化技巧</strong>，《原神》的AO都是在1/2×1/2分辨率的RT（Render Texture）上去做计算。为了保证画面的干净，我们对AO还做了一个模煳处理（blur）。然后再Upsample一个全分辨率的贴图上面去。所有的模煳处理和Upsamplepass，我们都用了一个Bilateral filter，确保不会有无效的AO渗透到周围的区域。 </span></p>
<p><span style="font-size: 16px;">从前面的描述可以看出，模煳处理和Upsample加起来一共有三个pass，这就意味着AO需要被读取和写入多次。而且如果你了解Bilateral Upsample的话，大家可以知道相邻的像素之间有很多的计算其实都是重复的，所以我们采用的优化方式是将所有的计算都放到一个compute pass里面去做。然后通过LDS来保存blur的中间值，通过同时输出四个像素的方式，来重用相邻像素的计算。最终我们还可以通过async compute pipe把性能开销进一步降低。</span></p>
<p><span style="font-size: 16px;">关于我们的Local Light，我们在游戏里面采用了 <strong>Clustered deferred lighting</strong>。我们支持是视野内同时出现最多1024盏灯。大概的做法是我们将屏幕分成64×64像素的tile，然后每一个tile在深度的方向上面继续分为16级的clusters。通过这两个图，可以大概看出我们能够支持多少灯。 </span></p>
<p style="text-align: center;"><img src="http://p9.itc.cn/q_70/images03/20201118/9b55c472d7bd4934907e2bbc2a6ecad9.png" /></p>
<p><span style="font-size: 16px;">这张图是一个游戏里面的截图，是一个典型的通过Local Light的阴影提升画面的情况，多个不同的Local Light，它们的照明范围是交错存在的，然后角色也投下多个不同的阴影朝不同的方向，画面就显得细节很丰富。</span></p>
<p style="text-align: center;"><img src="http://p1.itc.cn/q_70/images03/20201118/041f58c7f6e3491c8ab76b2335a3869a.png" /></p>
<p><span style="font-size: 16px;">我们怎么做的呢？我们的Local Light阴影系统支持接近100盏灯的实时阴影，理论上我们可以支持更多，不过这已经很够用了。阴影的分辨率是根据优先级和距离进行动态调整，最终的阴影是通过烘焙的静态场景阴影和实时生成的动态场景阴影结合得到的。游戏里面有很多的Local Light，如果每一个Local Light都去烘焙它的shadow texture的话，会占用的硬盘空间非常大。而且因为是深度贴图，所以不能随便使用BCN的压缩，那样会非常冒险。所以需要一个好的算法来对于烘焙的shadow texture做一个压缩。这个压缩需要在精度损失足够低的同时，还要保持压缩率足够高，同时我们的解压开销要非常小才行。</span></p>
<p style="text-align: center;"><img src="http://p1.itc.cn/q_70/images03/20201118/e807ef592b74403fbea86db2235a6c5a.png" /></p>
<p><span style="font-size: 16px;">我们开发的这个系统是在离线制作的时候，对于shadow texture做了一个压缩，尽量地去保持精度，运行的时候解压的速度也非常快，用compute shader去解压1K×1K的shadow texture，我们解压只需要0.05毫秒，可以说非常非常快。</span></p>
<p><span style="font-size: 16px;">那压缩率和压缩质量呢？我们先介绍一下压缩的算法思路。首先我们对于shadow texture按照一个2×2的block来进行编码，每4个深度值，我们用32bit来保存。如果想要降低精度损失，可以选择高精度压缩，这种情况之下每个block的大小变成64bit。编码的方式有两种，一种是基于深度平面方程的方式，或者是通过压缩的浮点数方式。编码完成之后，还要进一步通过一个quad tree来合并编码后的数据，进一步提高压缩率。quad tree是每个tile要保存一个，而每个tile又包含了16×16个block，大家可以看到下面的三个图，从左到右分别是没有压缩的深度贴图，中间是我们的平面方程编码的视图，最右边是我们quad tree 0到4级的深度视图，黑的地方是深度为0的区域。我们参考了Bo Li在2019年Siggraph上面的讲座，大家有兴趣可以去看一下。</span></p>
<p style="text-align: center;"><img src="http://p6.itc.cn/q_70/images03/20201118/dcea8af3959d4b58b97a60d566821d88.png" /></p>
<p><span style="font-size: 16px;">压缩比：在一个典型的室内场景默认精度压缩比是在20：1到30：1左右。如果开启高精度模式压缩的话，大概默认精度压缩到40%到70%。阴影贴图的压缩是非常有必要的，可以帮我们容量下降一个数量级。</span></p>
<p><span style="font-size: 16px;">大家可以看一个对比，这是默认精度压缩，能够看到红圈里面有一些瑕疵。这个实际上是我们找到的可以说是最差的一个情况。这是高精度压缩，基本上看不出任何瑕疵来。如果把高精度压缩的图和不压缩的情况做对比的话，其实肉眼是看不出什么差别，所以也没必要放上不压缩的图片。</span></p>
<p><img src="http://p4.itc.cn/q_70/images03/20201118/b0942e76a39341ddbd718b00949421ea.png" /></p>
<p><img src="http://p4.itc.cn/q_70/images03/20201118/a8d03861d74e4599bc9a5969655e4676.png" /></p>
<p><span style="font-size: 16px;">刚才的图是一个2K×2K的shadow texture，大小如果不压缩的话是在8MB，默认精度压缩大小变成了274.4KB，压缩率是29.85。如果替换成高精度压缩，就是肉眼看不出差距的压缩，贴图大小变成了583.5KB，这种情况的压缩率还是有14左右，所以还是相当不错的。</span></p>
<p><span style="font-size: 16px;">在搞好了Local Light以后，我们接下来要为游戏添加体积雾， <strong>体积雾是可以接受Local Light的照明影响，在灯的影响范围内会形成一圈光晕，可以极大地提升画面的体积感</strong>。大家可以看到图里面近处的灯笼周围会有一圈泛光。包括画面远处的建筑物，因为笼罩在灯光下会使得周围的体积雾也被照亮，而显得有一丝的朦胧。 </span></p>
<p style="text-align: center;"><img src="http://p0.itc.cn/q_70/images03/20201118/08a39b1dd5c64b588a4387253ba6238b.png" /></p>
<p><span style="font-size: 16px;">这个图是一个更有意思的情况。如果我们给Local Light加一个projection texture，也就是我们通过这个贴图来控制Local Light光照的形状，就像右边这样，体积雾也会产生相应的变化。</span></p>
<p style="text-align: center;"><img src="http://p8.itc.cn/q_70/images03/20201118/cd56de3b7df14e959fc76a6914f3675a.png" /></p>
<p><span style="font-size: 16px;">我们的体积雾的计算是基于物理情况，支持通过不同的参数让体积雾在大世界里面的不同区域有不同的表现。为了让体积雾更加稳定，画面更加细腻，我们给体积雾添加了Temporal filter进行了多帧的混合。整体的GPU开销，也控制的不错，在PS4 Pro下面大致在1毫秒甚至更少。</span></p>
<p><span style="font-size: 16px;">大致的实现是这样的：首先是基于相机空间，我们把view frustum分成很多的voxel，这些voxel跟我们前面提到的clustered deferred lighting的clusters是对齐的，这样方便我们在后面对Local Light做scattering计算的时候进行一个加速。</span></p>
<p><span style="font-size: 16px;">前面提到的体积雾参数和Local Light的信息，都会被注入到这些voxel里面去，然后我们通过Ray marching的方式去计算体积雾。在这个时候，Local Light的信息就自然而然被考虑进去了。</span></p>
<p><span style="font-size: 16px;">有了体积雾，我们不得不提到 <strong>God Ray效果</strong>，首先大家可以先看看游戏里面God Ray的表现。对于方向光进行遮挡就可以产生God Ray的效果，我们的做法是有一个单独的pass来生成God Ray，然后是在1/2×1/2分辨率下面。God Ray也是通过Ray marching的方式去生成的，我们会去采样shadow map，但是最多会采样5级的cascades。 </span></p>
<p><img src="http://p5.itc.cn/q_70/images03/20201118/27d01672e19945eabdbe4a486d0baaae.png" /></p>
<p><img src="http://p1.itc.cn/q_70/images03/20201118/62624e18bf61421994b2f678189710fa.png" /></p>
<p><span style="font-size: 16px;">God Ray生成完之后，我们会提供美术一些可以调整的参数，然后将God Ray的结果叠加到体积雾上面去。它在使用上面，并不是一个物理上正确的东西，但是它的效果是能够让美术满意的。</span></p>
<p><span style="font-size: 16px;">了解体积雾的人可能会有一个问题，为什么要单独使用一个pass呢？体积雾本身就可以产生God Ray。这个就是一个很好的技术和美术磨合的例子，我们有体积雾直接生成的God Ray，在游戏里面实际效果其实不能够让美术满意，原因有两点。第一个是分辨率不够，因为体积雾的分辨率是靠Voxel，而我们的Voxel是不会划分的特别精细的。第二是因为体积雾生成的God Ray强度是完全依赖于体积雾的浓度。要想得到很明显的God Ray，就需要雾的浓度提的非常高。雾的浓度一旦提高了，画面就会显得不通透，太脏，这就是回到前面提到的两组词里面，这是美术不能够接受的。所以我们是采用了单独的pass去生成God Ray，这样可以得到更锐利、更清晰的效果，美术调整也更灵活。美术想要什么，我们就给他做什么。</span></p>
<p><span style="font-size: 16px;">下面给大家看看对比图，大家就能更好地体会到我说的是什么意思。这个God Ray就是通过体积雾生成的，包括整个画面的表现。这张是我们游戏里面现在使用的方式，就是单独的pass去生成，做一个对比。</span></p>
<p><img src="http://p5.itc.cn/q_70/images03/20201118/258acdd9767449e7b1bf81f56ee5269d.png" /></p>
<p><img src="http://p7.itc.cn/q_70/images03/20201118/84ec196fc52245f38e16e83e53c5310c.png" /></p>
<p><span style="font-size: 16px;">大家可以看到第一张God Ray不是很明显，而且画面雾的浓度非常高。而第二张图，God Ray会更清晰一些，而且整个画面是更加干净、更加通透，这就是美术想要的效果。</span></p>
<p><span style="font-size: 16px;">接下来是 <strong>IBL（Image Based Lighting）系统</strong>，大家先看一下演示视频。图中左边的是 <strong>Reflection probe</strong>（反射探针），右边是 <strong>Ambient probe</strong>，随着24小时的变化，我们的Reflection probe和Ambient probe的内容也会跟着变化。 </span></p>
<p style="text-align: center;"><img src="http://p9.itc.cn/q_70/images03/20201118/0f17c3c577544a8097c3b994a8136b24.png" /></p>
<p><span style="font-size: 16px;">我们先看一下左边的Reflection probe。Reflection probe是用来给场景提供反射信息的。因为游戏的光影不断变化，我们是不能够简单地为反射探针烘焙一张环境贴图作为反射信息之用。所以对于每一个Reflection probe，我们是烘焙了一个mini GBuffer，产生在游戏当中，根据当时的光照条件去实时生成环境贴图，美术可以在游戏里面摆很多个这样的Reflection probe。</span></p>
<p><span style="font-size: 16px;">然后在运行的时候，我们会去更新场景的Reflection probe的cubemap。整个过程我们大致分为三步：第一步是 <strong>Relight</strong>，第二步是 <strong>Convolve和Compress</strong>。最后通过Compute Shader去同时处理六个面，然后分帧进行，只处理一个probe，不停地做循环。 </span></p>
<p style="text-align: center;"><img src="http://p6.itc.cn/q_70/images03/20201118/92a977b674564e298351ee36c6b4808a.png" /></p>
<p><span style="font-size: 16px;">第一个步骤，就是 <strong>Relight步骤</strong>，大家可以通过图能看出来，就是一个简单的把当前的光照环境用来照亮mini GBuffer，得到环境贴图的过程。然后生成的环境贴图，需要经过Convolve这一步，得到mipmap的正确信息。最后这个贴图需要再通过一个Compute Shader的做法，压缩成BC6H的格式，然后送到渲染管线里面去使用。大致是这么三步的过程。 </span></p>
<p style="text-align: center;"><img src="http://p6.itc.cn/q_70/images03/20201118/74404613f106486b86dd3b29562bb101.png" /></p>
<p style="text-align: center;"><img src="http://p7.itc.cn/q_70/images03/20201118/dfbf4828e9b249369c6c8597de015ccf.png" /></p>
<p><span style="font-size: 16px;">下面是我们的 <strong>Ambient probe</strong>。Ambient probe也是实时生成的。我们在做完Relight以后，Reflection probe是包含了当前的整个光照信息，我们可以从中提取出当前的Ambient的信息，并且把它转化成一个3阶的SH（Spherical Harmonic）系数保存下来。 </span></p>
<p style="text-align: center;"><img src="http://p6.itc.cn/q_70/images03/20201118/a2026f1eca484e6aaf4b7ade4cb4aa8d.png" /></p>
<p><span style="font-size: 16px;">这个提取的过程，在我们把Reflection probe处理完成以后会自动进行，也是同时使用Compute Shader来处理六个面。</span></p>
<p><span style="font-size: 16px;">这么看下来，我们整个系统算是完成了，但实际上里面有很多地方是可以改进的。第一个是Relight是没有阴影的，因为单靠mini GBuffer我们是没有办法在Relight pass生成阴影，这样会导致一个很大的问题。就是在Relight完成得到的环境贴图是漏光的，本来应该处于阴影当中的地面也会变得非常明亮。</span></p>
<p><span style="font-size: 16px;">通过这样的环境贴图算出的环境光（ambient）也会出现有问题的情况，那怎么解决呢？我们的做法是，我们把24小时的shadow都烘焙下来，就是隔一段时间我们烘焙一下，把shadow转化成一个shadow SH保存起来。在运行的时候简单通过当前的时间对shadow SH进行插值，用来压暗Relight以后的结果。</span></p>
<p><span style="font-size: 16px;">这样得到的效果是出乎意料的好，而且我们需要保存的数据非常的少。因为shadow SH很煳，所以我们做插值也没有什么大的问题。</span></p>
<p><span style="font-size: 16px;">同样的方式，我们还可以把Local Light的信息也保存下来，作为Local Light的SH在Relight的时候也加上去，这样可以得到非常好、非常廉价的一个Local Light 反弹的效果。大家可以看一下添加shadow SH的前后对比，没添加的情况之下，屋檐和地面都莫名其妙的亮，添加之后就能够看出来是在阴影当中了，所以效果是很明显的。</span></p>
<p><img src="http://p5.itc.cn/q_70/images03/20201118/10e89dc6143948538be074c3728bf5d1.png" /></p>
<p><img src="//p4.itc.cn/q_70/images03/20201118/876eb5c997914599af666a386e44442a.png" /></p>
<p><span style="font-size: 16px;">下面是我们把Local Light SH加进去的情况对比。大家注意看一下画面右上角那片屋檐下面暗的区域，这是没有添加Local Light SH的情况。这是添加了的。那块区域被照亮了。</span></p>
<p><img src="http://p3.itc.cn/q_70/images03/20201118/158f639fe2e64307a17f01eec044eb2e.png" /></p>
<p><img src="http://p7.itc.cn/q_70/images03/20201118/cac5ee20c80d412eaf9fd78157e421ec.png" /></p>
<p><span style="font-size: 16px;">我们现在已经解决了漏光的问题，并且添加了Local Light SH。接下来是一 <strong>个室内和室外光照环境不一致带来的问题</strong>。因为室内和室外的光照环境往往是很不一样的，如果不加区分的话，室内外的环境光（ambient）混在一起，得到的效果就很容易让人家觉得不对劲。 </span></p>
<p><span style="font-size: 16px;">我们是把Reflection probe分成室内、室外两种，然后美术通过摆放一个 <strong>室内环境用的网格（interior mesh）来标记受室内光影响的像素</strong>。Ambient probe也会相应地为室内、室外生成不同的环境光。 </span></p>
<p><span style="font-size: 16px;">而且我们还做了一个过度的处理，就是在室内的光照和室外的光照进行环境切换的时候，不会出现一个因为明显的光照差异不一样而产生的硬边的效果。</span></p>
<p><span style="font-size: 16px;">除了通过Reflection probe得到的反射，我们还有 <strong>Screen space reflection（SSR）</strong>来提供实时的反射信息。SSR在PS4 Pro上面的GPU开销大概是在 <strong>1.5毫秒</strong>左右，我们对SSR也加了一个Temporal filter，通过当前帧的SSR信息和历史信息混合起来，来提高SSR计算结果的稳定性，让画面也更平滑一些。 </span></p>
<p style="text-align: center;"><img src="http://p3.itc.cn/q_70/images03/20201118/ab162437c0a4407dbca5b0c43e2f034c.png" /></p>
<p><span style="font-size: 16px;">为了得到更多的反射信息，我们为SSR生成了Hi-Z的buffer，我们可以让每条射线通过Hi-Z最多能够跟踪的距离达到整个屏幕。</span></p>
<p><span style="font-size: 16px;">在没有SSR的情况之下也会有Reflection probe可以提供场景的反射信息。我们是使用了一个Deferred reflection pass来计算Reflection和Ambient信息。在计算Reflection的同时，我们把AO信息也考虑进去，这样可以有效地降低漏光瑕疵。</span></p>
<p><span style="font-size: 16px;">接下来是我们的最后一个技术点， <strong>HDR Display</strong>。这里面的HDR Display包含了两个方面，一个方面是指亮度，需要使用PQ ST2084的EOTF，最高是能够让画面亮度达到10000 nits。 </span></p>
<p><span style="font-size: 16px;">另外一方面就是 <strong>色彩空间</strong>，我们需要支持Rec.2020色彩空间，Rec.2020色彩空间和现在普遍的电视机使用的Rec.709相比，它可以显示的色彩范围要大得多。大家可以看看在CIE 1931色度图里面的覆盖范围对比。Rec.2020色彩空间覆盖范围大概能达到75.8%，相比之下Rec.709只能在35.9%的样子。 </span></p>
<p style="text-align: center;"><img src="http://p0.itc.cn/q_70/images03/20201118/8522fb288aa04cc5893e9cb4789702b7.png" /></p>
<p><span style="font-size: 16px;">在这里我们称使用了 <strong>ST2084和Rec.2020色彩空间的渲染管线为HDR管线，而使用的Rec.709色彩空间的非HDR管线，我们把他们叫做SDR管线</strong>。而为了让这个技术放到《原神》里面去，我们做了哪些调整。 </span></p>
<p><span style="font-size: 16px;">这张图是《原神》的SDR和HDR的管线对比图，和SDR管线相比，HDR管线没有了tone mapping，color grading变成了HDR的color grading。而代替tone mapping的是RRT+ODT（reference rendering transform + output display transform）的组合，这就是很多人熟悉的ACES调色。</span></p>
<p style="text-align: center;"><img src="http://p5.itc.cn/q_70/images03/20201118/e600c3df04d5480a80f4a5ff730a7df1.png" /></p>
<p><span style="font-size: 16px;">另外，UI在HDR下面，也是单独画到一张RT的。然后再跟场景做一个合并，这是因为UI的亮度处理方式跟场景是不太一样的。在图上大家看到RRT+ODT是灰掉的，我们待会会再来细讲这个事情。</span></p>
<p><span style="font-size: 16px;">《原神》从1.2版本开始，会在PS4上面支持HDR10的模式，然后替换SDR的Color grading是我们的HDR Color grading，美术会在Davinci这种软件上面去做HDR校色。然后通过我们的脚本输出HDR的Look-Up-Table(LUT)。</span></p>
<p style="text-align: center;"><img src="http://p7.itc.cn/q_70/images03/20201118/0577dbc4edc54e889abaaeb9716c6c41.png" /></p>
<p><span style="font-size: 16px;">在运行的时候，白平衡HDR的Color grading，还有我们的Color expansion这些操作，都会在一个compute pass里面，输出到一张Color的Look-Up-Table里面。因为这个Look-Up-Table很小，所以尽管前面提到的这些都是需要大量的计算操作，但实际上开销是很小的，大概不到 <strong>0.05毫秒</strong>。 </span></p>
<p><span style="font-size: 16px;">前面管线图的RRT+ODT部分是灰掉的，虽然这个是一个主流的调色方式，但是我们并没有采用它，因为和我们的游戏风格不太搭。所以尽管是主流，我们还是放弃了。</span></p>
<p><span style="font-size: 16px;">为了保证在低亮度范围内的画面和SDR版本的游戏一致，我们将HDR的渲染画面和tone mapping处理之后的画面做了一个基于亮度的混合，然后在亮度不高的地方，就尽量保证了filmic tonemapping的关于toe部分的处理。</span></p>
<p><strong><span style="font-size: 16px;">在低亮度范围内一致性的问题</span></strong><span style="font-size: 16px;">，这里面涉及到OOTF的事情。前面我们提到在HDR上面是用了BT1886作为一个EOTF曲线，然后在设备处理游戏输出的时候会用到，相应的游戏在输出信号给电视机的时候也会增加一条曲线，这个就是OETF。然后在HDR的管线里面，实际上就是一条gamma曲线。</span></p>
<p style="text-align: center;"><img src="http://p7.itc.cn/q_70/images03/20201118/5e47f3ad694c4f99ac36704416904700.png" /></p>
<p><span style="font-size: 16px;">但是这里面存在一个问题，就是1886的gamma是2.4，但是SDR的OETF是一个分段函数，大致上可以看作是gamma 2.2，这就出现了一个问题，也就是在PPT上写的问题。OETF处理完的颜色，经过EOTF，它得到的并不是它本身，就产生了一个误差。</span></p>
<p><span style="font-size: 16px;">但是在HDR下面，因为我们OETF和EOTF是被很好的定义了的情况，所以他们是互逆的，于是这个颜色在经过这两个处理之后能够得到原来的颜色，所以在HDR下面没有这么一个问题。</span></p>
<p><span style="font-size: 16px;">但是大家已经习惯了在HDR下面有这么一个误差的画面，所以为了模拟这个误差，我们是在HDR管线里面添加了OOTF，把差异给补上去了。</span></p>
<p><span style="font-size: 16px;">做完这些，是不是HDR就彻底没问题了呢？并不是。这还有一个大坑，叫做 <strong>Hue Shift。</strong></span></p>
<p><span style="font-size: 16px;">解释一下什么是Hue Shift？举个例子，大家可以看一下游戏里面火焰制作的示意图，我们通过一个灰度图，就是下面像馒头一样的东西，加一个噪声贴图，然后进行扰动，得到了火焰扰动的纹理，然后我们用橘色去染色。最后我们把火焰的整体亮度往上提，这个时候就得到大家可以看到的见证奇迹的时刻，在SDR下面因为有tone mapping的原因，tone mapping在亮部是有一条曲线的，会让亮度增加逐渐变慢，于是橘色的R通道跟G通道的差异本来是很大，但是随着亮度的增加，tone mapping曲线介入了，R通道的增长就变慢，G通道就逐渐赶了上来，于是就产生了Hue Shift，画面渐渐开始发黄，于是就得到了后面看到的SDR下面火焰的效果。</span></p>
<p style="text-align: center;"><img src="http://p9.itc.cn/q_70/images03/20201118/1c7751625ecd48248b44ebaa4f73fae2.png" /></p>
<p><span style="font-size: 16px;">但是问题来了：因为在HDR下面，我们是没有tone mapping的，Hue Shift是不会发生的。它叫做Hue Preserving。R通道跟G通道的比例关系是得到一个保持的，所以能够得到亮度非常高的橘色。但是在视觉上，不会让人家觉得很明亮，因为没有黄色。</span></p>
<p style="text-align: center;"><img src="http://p9.itc.cn/q_70/images03/20201118/806e33332599487ca64304c0ae28dd3d.png" /></p>
<p><span style="font-size: 16px;">那怎么去修改呢？一种常用的方法，也是很多大作都用的方法，叫做 <strong>黑体辐射</strong>。这是一个基于物理的算法，美术去指定温度，根据温度计算出应该是什么颜色。通过这种方式，我们是需要修改美术的资源。不过我们没有采用这种方式，为什么？一方面是因为HDR 这个功能是在很后期才加入的，我们不能够让美术去大量修改已有的资源。 </span></p>
<p><span style="font-size: 16px;">另外游戏并不是写实类的游戏，我们的火可以是各种颜色，而且还有很多其他的特效是随着元素反应去转换颜色的。所以我们自己搞了一个方法，我们在shader里面去模拟了Hue Shift，并且把模拟放到了color grading pass里面去，合并到Look-Up-Table的计算中。</span></p>
<p><span style="font-size: 16px;">这样的好处是，首先我们是不需要修改任何的效果，得到的效果非常满意，我们不仅仅是让火焰特效在HDR下面的效果跟SDR几乎一致。而且因为通过引入tone mapping的方式模拟了Hue Shift，所以我们前面提到的在非HDR的亮度部分的画面一致性的问题，也被顺手解决掉了，不需要跟tone mapping处理之后的画面做混合。而且这个操作，也是在生成Look-Up-Table的时候去做的，所以它的性能增加是可以忽略不计的。</span></p>
<p><strong><span style="font-size: 16px;">技术介绍我们就到这里介绍了，下面是我一些个人的总结和感想。</span></strong><span style="font-size: 16px;"></span></p>
<p style="text-align: center;"><img src="http://p4.itc.cn/q_70/images03/20201118/e8f6286a248e4d73a7c2cd2e5f92d436.png" /></p>
<p><span style="font-size: 16px;">就像前面提到的，《原神》的主机版开发是第一次尝试，时间、资源和人才都很缺乏。通过一年多的开发，我们积累了很多的经验，尤其是如何把写实的渲染技术跟风格化游戏结合的经验，非常的宝贵！随着新的主机平台的到来，我们又面临了一大波的技术升级。不过和在美国的时候相比，国内主机开发的从业人员太少了，希望大家能够多多交流，和我们探讨一下技术，交流一下开发经验。</span></p>
<p><span style="font-size: 16px;">我这次的分享就结束了，感谢大家！</span></p>