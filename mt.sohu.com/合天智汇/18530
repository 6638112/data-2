➜「自检清单」再来一打Web安全面试题
http://www.sohu.com/a/420776407_99907709	10036
<p><span style="font-size: 16px;">亲爱的,关注我吧</span></p>
<p style="text-align: center;"><span style="font-size: 16px;"><strong>9/25</strong></span></p>
<p><span style="font-size: 16px;">文章共计2575个词</span></p>
<p><span style="font-size: 16px;">预计阅读10分钟</span></p>
<p><span><span style="font-size: 16px;">一起来阅读吧</span></span></p>
<p><span style="font-size: 16px;">作者： <span style="font-size: 16px;">霍语佳</span></span></p>
<p><span style="font-size: 16px;">转载自公众号：前端食堂</span></p>
<p style="text-align: left;">本文已收录在前端食堂 Github https://github.com/Geekhyt/front-end-canteen，感谢Star。 </p>
<p style="text-align: left;">从胡子的长度和忧郁的眼神我察觉到，面前坐着的这位面试官应该有点东西，浑身上下流露着打过 CTF 的气场。我像以往一样，准备花3分钟的时间进行自我介绍。在此期间，面试官面无表情但很有耐心的听着我bilibala。</p>
<p style="text-align: left;">我按照原定计划顺利地介绍(吹)完自己的项目经验，面试官露出了一丝淡淡的微笑看着我说：</p>
<blockquote>
<span style="font-size: 20px;">❝</span>
<p>你觉得自己最擅长的是什么？</p>
<p><span>❞</span></p>
</blockquote>
<p>你觉得自己最擅长的是什么？</p>
<p><span>❞</span></p>
<p style="text-align: left;">(我淡淡的回应道：虽然是一名前端工程师，但是我对web安全很感兴趣。)</p>
<p><span style="font-size: 16px;">0.CIA三元组知道吗？</span></p>
<ul>
<li><p>机密性（ Confidentiality ） </p></li>
<li><p>完整性（ Integrity ） </p></li>
<li><p>可用性（ Availability ） </p></li>
</ul>
<p>机密性（ Confidentiality ） </p>
<p>完整性（ Integrity ） </p>
<p>可用性（ Availability ） </p>
<p style="text-align: left;">(这三个东西一定要回答的干净利落，不假思索)</p>
<p><span style="font-size: 16px;">1.XSS攻击是如何产生的？</span></p>            <div class="lookall-box">
<div class="lookall-shadow"></div>
<section class="lookall">
<a href="javascript:;" class="show-all" id="showMore">
<em>展开全文</em>
</a>
</section>
</div>
<div class="hidden-content control-hide">
<p style="text-align: left;">黑客在你的浏览器中插入一段恶意 Java 脚本，窃取你的隐私信息、冒充你的身份进行操作。这就是 XSS 攻击( Cross-Site ing ，跨站脚本攻击) </p>
<p style="text-align: left;">因为浏览器无法区分脚本是被恶意注入的还是正常的内容，它都会执行，况且 HTML 非常灵活，可以在任何时候对它进行修改。 </p>
<p><span style="font-size: 16px;">2.知道XSS有哪几种类型吗？</span></p>
<p style="text-align: left;">（送分题）</p>
<ul>
<li><p>反射型 XSS (也叫非持久型) </p></li>
<li><p>基于 DOM 的 XSS </p></li>
<li><p>存储型 XSS (也叫持久型 XSS) </p></li>
</ul>
<p>反射型 XSS (也叫非持久型) </p>
<p>基于 DOM 的 XSS </p>
<p>存储型 XSS (也叫持久型 XSS) </p>
<p style="text-align: left;">反射型 ：顾名思义，恶意 Java 脚本属于用户发送给网站请求中的一部分，随后网站又将这部分返回给用户，恶意脚本在页面中被执行。一般发生在前后端一体的应用中，服务端逻辑会改变最终的网页代码。 </p>
<p style="text-align: left;">基于DOM型 ：目前更流行前后端分离的项目，反射型 XSS 无用武之地。但这种攻击不需要经过服务器，我们知道，网页本身的 Java 也是可以改变 HTML 的，黑客正是利用这一点来实现插入恶意脚本。 </p>
<p style="text-align: left;">存储型 ：又叫持久型 XSS，顾名思义，黑客将恶意 Java 脚本长期保存在服务端数据库中，用户一旦访问相关页面数据，恶意脚本就会被执行。常见于搜索、微博、社区贴吧评论等。 </p>
<p><span style="font-size: 16px;">4.说一说它们之间的区别</span></p>
<p style="text-align: left;">反射型的 XSS 的恶意脚本存在 URL 里， 存储型 XSS 的恶意代码存在数据库里。 </p>
<p style="text-align: left;">而基于 DOM型的XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 Java 自身的安全漏洞，其他两种 XSS 都属于服务端的安全漏洞。 </p>
<p style="text-align: left;">(面试官微微抬起头，递给我一张纸。)</p>
<p><span style="font-size: 16px;">5.再画个图解释一下把</span></p>
<p style="text-align: left;">(好的，给你降维解释一波)</p>
<p><span>反射型</span></p>
<p style="text-align: center;"><img src="http://p0.itc.cn/q_70/images03/20200925/deaaf59463f143abb6310325d56023fe.jpeg" /></p>
<p><span>基于DOM型</span></p>
<p style="text-align: center;"><img src="http://p8.itc.cn/q_70/images03/20200925/909dea3dff4c4a3999e9e7e28860fa3e.jpeg" /></p>
<p><span>存储型</span></p>
<p style="text-align: center;"><img src="http://p9.itc.cn/q_70/images03/20200925/a60bffa1186d49558f8bc2cbd83bc435.jpeg" /></p>
<p style="text-align: left;">（面试官：小伙子图画的不错）</p>
<p><span style="font-size: 16px;">6.黑客可以通过XSS攻击做哪些事儿？</span></p>
<ul>
<li><p>盗取用户 Cookie </p></li>
<li><p>未授权操作 </p></li>
<li><p>修改 DOM </p></li>
<li><p>刷浮窗广告 </p></li>
<li><p>发动 XSS 蠕虫攻击 </p></li>
<li><p>劫持用户行为，进一步渗透内网 </p></li>
</ul>
<p>盗取用户 Cookie </p>
<p>未授权操作 </p>
<p>修改 DOM </p>
<p>刷浮窗广告 </p>
<p>发动 XSS 蠕虫攻击 </p>
<p>劫持用户行为，进一步渗透内网 </p>
<p style="text-align: left;">(...太多了)</p>
<p><span style="font-size: 16px;">7.XSS攻击如何进行防护？</span></p>
<ul>
<li><p>一切用户输入皆不可信， 在输出时进行验证 </p></li>
<li><p>将 HTML 元素内容、属性以及 URL 请求参数、CSS 值进行编码 </p></li>
<li><p>当编码影响业务时，使用 白名单规则进行检测和过滤 </p></li>
<li><p>使用 W3C 提出的 CSP (Content Security Policy，内容安全策略) ，定义域名白名单 </p></li>
<li><p>设置 Cookie 的 HttpOnly 属性 </p></li>
</ul>
<p>一切用户输入皆不可信， 在输出时进行验证 </p>
<p>将 HTML 元素内容、属性以及 URL 请求参数、CSS 值进行编码 </p>
<p>当编码影响业务时，使用 白名单规则进行检测和过滤 </p>
<p>使用 W3C 提出的 CSP (Content Security Policy，内容安全策略) ，定义域名白名单 </p>
<p>设置 Cookie 的 HttpOnly 属性 </p>
<p style="text-align: left;">(没想到你还爱听新闻)</p>
<ul>
<li><p>2005年，年仅19岁的 Samy Kamkar 发起了对 MySpace.com 的 XSS Worm 攻击。Samy Kamkar 的蠕虫在短短几小时内就感染了100万用户——它在每个用户的自我简介后边加了一句话：“but most of all, Samy is my hero.”（Samy是我的偶像）。这是 Web 安全史上第一个重量级的 XSS Worm，具有里程碑意义。 </p></li>
<li><p>2007年12月，百度空间收到蠕虫攻击，用户之间开始转发垃圾短消息。 </p></li>
<li><p>QQ 邮箱 m.exmail.qq.com 域名被发现反射型 XSS 漏洞 </p></li>
<li><p>2011年新浪微博曾被黑客 XSS 攻击，黑客诱导用户点击一个带有诱惑性的链接，便会自动发送一条带有同样诱惑性链接微博。攻击范围层层扩大，也是一种蠕虫攻击。 </p></li>
</ul>
<p>2005年，年仅19岁的 Samy Kamkar 发起了对 MySpace.com 的 XSS Worm 攻击。Samy Kamkar 的蠕虫在短短几小时内就感染了100万用户——它在每个用户的自我简介后边加了一句话：“but most of all, Samy is my hero.”（Samy是我的偶像）。这是 Web 安全史上第一个重量级的 XSS Worm，具有里程碑意义。 </p>
<p>2007年12月，百度空间收到蠕虫攻击，用户之间开始转发垃圾短消息。 </p>
<p>QQ 邮箱 m.exmail.qq.com 域名被发现反射型 XSS 漏洞 </p>
<p>2011年新浪微博曾被黑客 XSS 攻击，黑客诱导用户点击一个带有诱惑性的链接，便会自动发送一条带有同样诱惑性链接微博。攻击范围层层扩大，也是一种蠕虫攻击。 </p>
<p style="text-align: left;">CSRF 英文全称是 Cross-site request forgery ，又称为“跨站请求伪造”。 </p>
<p style="text-align: left;">顾名思义， CSRF 攻击就是黑客引诱用户打开黑客的网站，利用用户的登陆状态发起跨站请求。 </p>
<p style="text-align: left;">降维解释：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证， 达到冒充用户对被攻击的网站执行某项操作的目的。</p>
<p><span style="font-size: 16px;">10.CSRF攻击一般怎么实现？</span></p>
<ul>
<li><p>最容易实现的是 Get 请求，一般进入黑客网站后，可以通过设置 img 的 src 属性来自动发起请求 </p></li>
<li><p>在黑客的网站中，构造隐藏表单来自动发起 Post 请求 </p></li>
<li><p>通过引诱链接诱惑用户点击触发请求，利用 a 标签的 href 。 </p></li>
</ul>
<p>最容易实现的是 Get 请求，一般进入黑客网站后，可以通过设置 img 的 src 属性来自动发起请求 </p>
<p>在黑客的网站中，构造隐藏表单来自动发起 Post 请求 </p>
<p>通过引诱链接诱惑用户点击触发请求，利用 a 标签的 href 。 </p>
<p style="text-align: left;">点击下载美女视频</p>
<p><span style="font-size: 16px;">11.CSRF攻击和XSS攻击有什么区别？</span></p>
<p style="text-align: left;">CSRF 攻击不需要将恶意代码注入用户的页面，仅仅是利用服务器的漏洞和用户的登录状态来实施攻击。</p>
<p style="text-align: left;">CSRF 攻击成本也比 XSS 低，用户每天都要访问大量网页，无法确认每一个网页的合法性，从用户角度来说，无法彻底防止 CSRF 攻击。</p>
<p><span style="font-size: 16px;">12.那应该如何防范CSRF攻击？</span></p>
<ul>
<li><p>针对实际情况，设置关键 Cookie 的 SameSite 属性为 Strict 或 Lax </p></li>
<li><p>服务端验证请求来源站点( Referer、Origin ) </p></li>
<li><p>使用 CSRF Token ，服务端随机生成返回给浏览器的 Token，每一次请求都会携带不同的 CSRF Token </p></li>
<li><p>加入二次验证(独立的支付密码) </p></li>
</ul>
<p>针对实际情况，设置关键 Cookie 的 SameSite 属性为 Strict 或 Lax </p>
<p>服务端验证请求来源站点( Referer、Origin ) </p>
<p>使用 CSRF Token ，服务端随机生成返回给浏览器的 Token，每一次请求都会携带不同的 CSRF Token </p>
<p>加入二次验证(独立的支付密码) </p>
<ul>
<li><p>对称加密算法 </p></li>
<ul>
<li><p>对称加密算法就是加密和解密使用同一个密钥，简单粗暴 </p></li>
<li><p>常见的经典对称加密算法有 DES、AES(AES-128)、IDEA、国密SM1、国密SM4 </p></li>
</ul>
<li><p>非对称加密算法 </p></li>
<ul>
<li><p>非对称加密就是加密和解密使用不同的密钥。发送方使用公钥对信息进行加密，接收方收到密文后，使用私钥进行解密。 </p></li>
<li><p>主要解决了密钥分发的难题 </p></li>
<li><p>我们常说的签名就是私钥加密 </p></li>
<li><p>常见的经典非对称加密算法有 RSA、ECC和国密SM2 </p></li>
</ul>
<li><p>散列算法 </p></li>
<ul>
<li><p>不可逆性、鲁棒性、唯一性 </p></li>
<li><p>MD5、SHA(SHA-256)、国密SM3 </p></li>
<li><p>使用时记得加盐 </p></li>
</ul>
</ul>
<p>对称加密算法 </p>
<ul>
<li><p>对称加密算法就是加密和解密使用同一个密钥，简单粗暴 </p></li>
<li><p>常见的经典对称加密算法有 DES、AES(AES-128)、IDEA、国密SM1、国密SM4 </p></li>
</ul>
<p>对称加密算法就是加密和解密使用同一个密钥，简单粗暴 </p>
<p>常见的经典对称加密算法有 DES、AES(AES-128)、IDEA、国密SM1、国密SM4 </p>
<p>非对称加密算法 </p>
<ul>
<li><p>非对称加密就是加密和解密使用不同的密钥。发送方使用公钥对信息进行加密，接收方收到密文后，使用私钥进行解密。 </p></li>
<li><p>主要解决了密钥分发的难题 </p></li>
<li><p>我们常说的签名就是私钥加密 </p></li>
<li><p>常见的经典非对称加密算法有 RSA、ECC和国密SM2 </p></li>
</ul>
<p>非对称加密就是加密和解密使用不同的密钥。发送方使用公钥对信息进行加密，接收方收到密文后，使用私钥进行解密。 </p>
<p>主要解决了密钥分发的难题 </p>
<p>我们常说的签名就是私钥加密 </p>
<p>常见的经典非对称加密算法有 RSA、ECC和国密SM2 </p>
<p>散列算法 </p>
<ul>
<li><p>不可逆性、鲁棒性、唯一性 </p></li>
<li><p>MD5、SHA(SHA-256)、国密SM3 </p></li>
<li><p>使用时记得加盐 </p></li>
</ul>
<p>不可逆性、鲁棒性、唯一性 </p>
<p>MD5、SHA(SHA-256)、国密SM3 </p>
<p>使用时记得加盐 </p>
<p style="text-align: left;">AES 是国际上最认可的密码学算法，只要算力没有极大的突破性进展，这种算法在可预期的未来都是安全的。 </p>
<p style="text-align: left;">ECC 是目前国际上加密强度最高的非对称加密算法。 </p>
<p style="text-align: left;">MD5 和 SHA 的唯一性被破解了，但是大部分场景下，不会构成安全问题。一般使用 SHA-256 加盐 即可满足大部分使用场景。 </p>
<p><span style="font-size: 16px;">14.简单说一下HTTPS的实现原理</span></p>
<p>Client 发送 random1+对称加密套件列表+非对称加密套件列表 </p>
<p>Server 收到信息， 选择 对称加密套件+非对称加密套件 并和 random2+证书(公钥在证书中) 一起返回 </p>
<p>Client 验证证书有效性，并用 random1+random2 生成 pre-master 通过服务器公钥加密+浏览器确认 发送给 Server </p>
<p>Server 收到 pre-master， 根据约定的加密算法对 random1+random2+pre-master（解密）生成 master-secret，然后发送服务器确认 </p>
<p>Client 收到生成同样的 master-secert ，对称加密秘钥传输完毕 </p>
<p style="text-align: left;">(基操，勿6)</p>
<p style="text-align: left;">HTTPS 在 TCP 和 HTTP 中间加入了 SSL/TLS 安全层。</p>
<ul>
<li><p>对发起 HTTP 请求的数据进行加密操作 </p></li>
<li><p>对接收到 HTTP 的内容进行解密操作。 </p></li>
</ul>
<p>对发起 HTTP 请求的数据进行加密操作 </p>
<p>对接收到 HTTP 的内容进行解密操作。 </p>
<p style="text-align: left;">采用对称加密的方式加密传输数据和非对称加密的方式来传输密钥，既可以解决传输效率问题也能保证两端数据的安全传输。除此之外，为了能够证明服务器是可靠的，引入了数字证书，让浏览器验证证书的可靠性。</p>
<p style="text-align: left;">面试官拿起旁边已经凉透的乌龙茶，喝了一口。</p>
<p style="text-align: left;">(小伙子，有点东西)</p>
<p><span style="font-size: 16px;">参考</span></p>
<ul>
<li><p>白帽子讲Web安全 </p></li>
<li><p>浏览器工作原理与实践 </p></li>
<li><p>安全攻防技能30讲 </p></li>
</ul>
<p>白帽子讲Web安全 </p>
<p>浏览器工作原理与实践 </p>
<p>安全攻防技能30讲 </p>
<p style="text-align: center;"><span style="font-size: 20px;"><strong>9/25</strong></span></p>
<p><span>投稿细则都在里面了，点击查看哦</span></p>
<p><span>重金悬赏 | 合天原创投稿涨稿费啦！ </span></p>
<p>戳 <span>“阅读原文”</span>我们一起进步 </p>