➜8个实用步骤，教你执行与落地一套设计系统，提升设计价值
http://www.woshipm.com/pd/4175447.html	5874
<blockquote><p>编辑导读：随着互联网行业的发展，产品体验的一致性和开发的效率越来越被重视，设计系统的出现就是为了解决这样的问题。但在国内，设计系统这一块还处于初级阶段。如果做好了设计系统这块的工作，是设计师体现自身价值的一个很重要的机会。</p>
<p>本文作者详尽地分享了她们公司是如何一步一步的构建设计系统的，供大家一起参考学习。</p></blockquote>
<p><img data-action="zoom" class="aligncenter" src="http://image.woshipm.com/wp-files/2020/09/dQgL6954zFAOBzFeDPqI.jpg" alt="" width="900" height="420" /></p>
<p>设计系统现在是常用的设计手段，你可能经常能看到这个词。我在之前做的一个web设计项目中，第一次接触到“设计系统”。在 99.co 项目中中我仅与另外一位产品设计师合作，资源实在有限。不过我们认为设计系统非常重要，因为它能消除设计不一致、改善设计师和开发未来的工作流程。为了推动这个项目，我们必须要做更多的努力。</p>
<p>为了更好地理解，我在这里定义一下什么是设计系统——具有清晰的使用规范、可重复使用的组件库，并在设计师和开发者之间共享。它需要标明组件应何时使用，包括随时可调用的代码。</p>
<p>我们的设计系统仍在迭代中，但我仍希望通过这篇文章，能把我们的经验以及一些有用的技巧和工具分享给你。</p>
<p><strong>步骤：</strong></p>
<ol>
<li>检查现有组件</li>
<li>学习参考优秀的设计系统</li>
<li>列出组件表</li>
<li>计划时间</li>
<li>完善组件</li>
<li>创建控件</li>
<li>“设计”设计系统</li>
<li>设计系统落地</li>
</ol>
<h2>步骤1：检查现有组件</h2>
<p>为了全面了解我们要做的事，对产品中现有组件进行检查非常重要。包括每个页面上的每个元素。这是至关重要的一步，尽管很繁琐乏味。为此，我们截了一些图，并使用 Trello(https://trello.com) 对其进行整理。</p>
<p><img data-action="zoom" class="aligncenter" src="http://image.woshipm.com/wp-files/2020/09/GQq9L2EvcCoMXD3gF2ef.png" /></p>
<p style="text-align: center;">Trello面板，每一列都是带有标签的卡片</p>
<p>每一列(从上到下) 代表我们网站上的一个页面，例如主页。每一列的页面都被截图，并组织成卡片。每张卡片都有标签标记（右侧的面板），这些标签表示页面中存在的每个组件。不同颜色的标签代表不同组件。例如复选框、单选按钮等是数据输入的形式，它们用绿色标记。</p>
<p><img data-action="zoom" class="aligncenter" src="http://image.woshipm.com/wp-files/2020/09/AJqxkojnHD6woaefJZA3.png" /></p>
<p style="text-align: center;">通过颜色分类可以过滤出相同类型的组件</p>
<p>通过这种方式进行组织，我们可以轻松地搜索特定页面，或者使用右侧面板按组件进行过滤，并查看所有页面上当前的用例。它还有助于发现设计不一致之处。</p>
<h2>步骤2：学习参考优秀的设计系统</h2>
<p>以下是一些标杆级的设计系统，我们将它们作为参考：</p>
<ul>
<li>[Atlassian](https://atlassian.design/)</li>
<li>[Ant Design](https://ant.design/)</li>
<li>[IBM](https://www.carbondesignsystem.com/)</li>
<li>[Zendesk](https://garden.zendesk.com/)</li>
<li>[Workday](https://design.workday.com/)</li>
<li>[HubSpot](https://canvas.hubspot.co)</li>
<li>[Salesforce](https://www.lightningdesignsystem.com/)</li>
<li>[Shopify](https://polaris.shopify.com/)</li>
<li>[Bootstrap](https://getbootstrap.com/)</li>
<li>[QuickBooks](https://designsystem.quickbooks.com/)</li>
</ul>
<p>我们想汲取这些出色的设计系统中的精华，看看它们是如何做的。下面介绍几个我最喜欢的——Atlassian 和 Ant Design</p>
<p><img data-action="zoom" class="aligncenter" src="http://image.woshipm.com/wp-files/2020/09/uuPCJiTLXMafinSYzGMH.png" /></p>
<p style="text-align: center;">Atlassian 设计系统</p>
<p>Altassian将其设计系统分为“品牌”，“营销”和“产品”。由于不同方面的设计需要不同的准则，所以要满足各方面的需求以确保公司的设计语言一致。例如，与“产品”相比，“营销”在设计漂亮的搭配时需要更多的颜色，而”产品” 我们一般只需要一组固定的颜色来展示不同的组件状态。Altassian还为每个组件标注了非常清楚的使用指引，包括不同的样式和变化，还有使用案例。</p>
<p><img data-action="zoom" class="aligncenter" src="http://image.woshipm.com/wp-files/2020/09/Nla1xH3YiUZxj4RZbT6R.png" /></p>
<p style="text-align: center;">Ant 设计系统</p>
<p>Ant Design 将其组件分为不同的部分，例如数据显示，数据输入，导航等等。这确实有助于组织和查找组件。它们在右上角展示这些锚点（译者注：类似于组件的标签），这样用户无需滚动到底就可以知道每个页面的组件内容。每个组件的样式和变化都预先展示，并且每个组件都是可交互的。代码的提供也使开发人员可以快速获得代码，这是非常棒的用户体验！</p>
<h2>步骤3：列出组件表</h2>
<p>在学习了其他的设计系统后，我根据我们在Trello上的研究和筛选标签，圈出了需要的模式和组件。这样一来，我们就可以对需要走查的内容有一个大致了解，以便我们能够时刻跟进并安排时间。</p>
<p><img data-action="zoom" class="aligncenter" src="http://image.woshipm.com/wp-files/2020/09/F5qfjA4650KxBC84ii2r.png" /></p>
<p style="text-align: center;">Google Docs上的跟进概述</p>
<p>我根据功能将组件分为以下几个部分：按钮、数据输入、数据显示、反馈和导航。我们会不断修订这个表，讨论完一个就勾掉一个。</p>
<h2>步骤4：安排时间</h2>
<p>接下来，我们根据每个人的任务分工制定了每周时间表。这有助于使参与设计系统的每个人都了解最新的进度，并有助于资源分配。我们从Trello用例中最常用的组件开始。版式，颜色和布局是首要的，因为它们为后面要做的事奠定了基础。</p>
<p><img data-action="zoom" class="aligncenter" src="http://image.woshipm.com/wp-files/2020/09/hMKbWJAMA3TQtuqaSQia.png" /></p>
<p style="text-align: center;">Google Sheet 上的时间表</p>
<p>日常工作之外的时间有限，我们争取每周有两到三次对设计系统的讨论，每次大约两小时。当然这是理想的情况。很多时候，产品设计师都被工作淹没了，无法抽出时间。在少数情况下，我们能够投入更多的时间来讨论，并尽量弥补失去的时间。</p>
<p>除了每周讨论之外，我们还在sketch上把组件作成控件，制作了设计系统的页面，并让前端人员来构建这些页面。我们将根据我们的进展每周不断更新时间表。</p>
<h2>步骤5：完善组件</h2>
<p>研究和讨论的最终目的是完善组件，设计它们的属性和状态，并建立准则。每个组件我们都在Trello上回顾了它的使用案例，并研究最佳用法。</p>
<p>起初，我们在开会时研究组件。但是后来我们意识到研究并不需要两个设计师都在场。事先各自用自己的时间研究，保证开会时的讨论时间，这样会更好。</p>
<p><img data-action="zoom" class="aligncenter" src="http://image.woshipm.com/wp-files/2020/09/gEMryCN2pJLtYjcl91hq.png" /></p>
<p style="text-align: center;">Google Drive 里关于讨论的文件</p>
<p>我们用Google Docs做了会议记录，以便跟进决策，也能回顾我们是如何做出这些决策的。有了这些笔记，我们就会想起过去的思考过程和决策，以便更好地进行后续的决策。</p>
<h2>步骤6：创建控件</h2>
<p>随着讨论的深入，我们开始构建样式规范。我创建了文本和图层样式库，并在满足其状态和变化时对Sketch上的每个组件进行控件化。</p>
<p><img data-action="zoom" class="aligncenter" src="http://image.woshipm.com/wp-files/2020/09/RGjoref3W64IQmuqK7rK.png" /></p>
<p style="text-align: center;">Sketch上的文本和图层样式库</p>
<p><img data-action="zoom" class="aligncenter" src="http://image.woshipm.com/wp-files/2020/09/MeP11lPmIDOzE1L1ygLZ.png" /></p>
<p style="text-align: center;">Sketch上的组件库</p>
<p>我们再一次梳理了内容，并参考其他的UI Kits，以比较命名方式。我意识到，实际上不存在完美的命名方式，我们应当找到适合我们的。随着工具的不断更新，我们还可能要相应地调整工作流程。</p>
<p>举个例子，最近的sketch60更新，更新了组件面板和弹窗。我们之前的样式库命名方式是根据大小、字重、颜色、对齐方式和线条高度划分多个层。在新版本的弹窗中，我们必须点击很多次才能找到特定的样式。</p>
<p><img data-action="zoom" class="aligncenter" src="http://image.woshipm.com/wp-files/2020/09/4s3wHdr92oqEUvFcOTya.png" /></p>
<p style="text-align: center;">更新过的命名方式</p>
<p>为了适应这次更新，我拉平了命名结构，现在可以通过[size] [weight] 来搜索那些带有或不带默认行高的字体颜色，或通过[colour]来查看按大小和字重排序的此颜色的字体。我们的中性色色板的命名也从[Dark], [Mid] 和 [Light] 缩短为 [D]，[M],和 [L]，因为弹出框的空间有限。在未来，我预计将会有更多的变化，但总体来说，这些更新肯定会提高我们的效率。</p>
<p><strong>下面是一些有用的文章：</strong></p>
<ul>
<li>释放SKETCH控件的全部潜能[Unleashing The Full Potential Of Symbols In Sketch](https://medium.com/sketch-app-sources/sketch-symbols-b36f7355414a)</li>
<li>我们都在等待SKETCH更新[The Sketch Update We’ve All Been Waiting For](https://medium.com/ux-power-tools/the-sketch-update-weve-all-been-waiting-for-plus-a-brand-new-ux-power-tools-72c405fd490d)</li>
<li>Sketch58 智能布局[Sketch 58 — Smart Layout!](https://medium.com/sketch-app-sources/sketch-58-smart)</li>
<li>在SKETCH中使用智能布局[Using smart layout in Sketch](https://uxdesign.cc/sketch-smart-layout-bfc8ceeda44c)</li>
<li>sketch60 新组件面板使用指南[Sketch 60 &amp; New Components Panel — How to Use It?](https://medium.com/sketch-app-sources/sketch-60-new-components-p)</li>
<li>如何在组件中使用样式和控件[How to work with Styles &amp; Symbols in Sketch Components Panel](</li>
</ul>
<p><strong>还有好用的sketch插件：</strong></p>
<ul>
<li>Find and Replace : 快速在图层和控件中更改文本</li>
<li>[Find and Replace](https://github.com/mscodemonkey/Sketch-Find-And-Replace)</li>
<li>¡Shared Style Finder : 共享图层或文本样式搜索器</li>
<li>[Shared Style Finder](https://github.com/sonburn/shared-style-finder)</li>
<li>Sketch Runner : 用键盘更快的执行 sketch action(宏命令)</li>
<li>[Sketch Runner](https://sketchrunner.com/)</li>
<li>Symbol Organizer : 按字母顺序排序控件，并按控件名分组</li>
<li>[Symbol Organizer](https://github.com/sonburn/symbol-organizer)</li>
</ul>
<h2>步骤7：“设计”设计系统</h2>
<p>如上所述，我们希望将其他设计系统的精华纳入我们的设计系统。在每个页面的组件控件化之后，我为每个页面设计了模型，然后给前端人员来实现这些页面。</p>
<p><img data-action="zoom" class="aligncenter" src="http://image.woshipm.com/wp-files/2020/09/br40LsLBl9vRoapnFXL5.png" /></p>
<p style="text-align: center;">Sketch上的设计系统模型</p>
<p>我们很快就发现这并不理想。我们花了大力气去做这些页面，但资源实在有限。因此得有个工具来减少我们的工作量。以便可以将资源更好地分配给必要的事——那就是制作组件并在产品中实现它们。</p>
<p>找到一个可以集成到现有工作流程中的工具至关重要，版本控制、品牌定制等功能也很好。我们在 uxtools.co 看到了设计工具功能比较的表格。经过考量，我们决定使用Zeroheight.</p>
<p><img data-action="zoom" class="aligncenter" src="http://image.woshipm.com/wp-files/2020/09/emlFa4kmlDNDU5J7IUYK.png" /></p>
<p style="text-align: center;">Zeroheight设计系统</p>
<p>我在每个页面中为不同的组件和其变化都设立了使用指南，并且通过插件将sketch控件直接导入zeroheight。可以使用交互式HTML代码段和storybook组件向观看者显示实时组件示例，开发人员还能调用API轻松与设计保持同步。</p>
<h2>步骤8：设计系统落地</h2>
<p>与工程师、产品经理和其他利益相关者的沟通在整个流程中都非常重要，尤其是设计的执行。为了实现设计系统，我们构建新的组件，将他们链到zeroheight，并替换现有的旧组件。</p>
<p><img data-action="zoom" class="aligncenter" src="http://image.woshipm.com/wp-files/2020/09/vzlhJIkeFsH0V1okLuUE.png" /></p>
<p style="text-align: center;">Google Sheets上的计划表</p>
<p>我向数据分析师核对了最常访问页面的情况。由于这些页面的流量最高，因此我们决定在不同阶段更新这些页面的组件。最初的计划是每两周进行一次更新。</p>
<p>然而作为一个初创公司，必须优先考虑做功能上的工作，我们无法按计划坚持下去，而是做了妥协。我们正在做哪个页面，就将新的组件替换到这个页面上。</p>
<p><img data-action="zoom" class="aligncenter" src="http://image.woshipm.com/wp-files/2020/09/meJfqB9518INFxKPUxjk.png" /></p>
<p style="text-align: center;">Zeplin上的整体风格指南</p>
<p><img data-action="zoom" class="aligncenter" src="http://image.woshipm.com/wp-files/2020/09/lgC5Gb7f1hTllqistO1W.png" /></p>
<p style="text-align: center;">Zeplin上的连接组件</p>
<p>我们用于提高设计师和开发人员之间协作的另一个工具是Zeplin,它有 整体风格指南 和 连接组件 。正如上图所示 ，我们将所有新的组件直接上传到风格指南中，开发人员就能够将他们的代码库和文档来源（storybook或 github）链接到这些组件。这么做后，每当开发人员在Zeplin上检查设计时，他们都可以查看这些组件的概述，并可以重复使用它们。</p>
<p>以上就是我们从0开始设计系统的方式。我们仍有许多工作要做，但是进展缓慢总比没有要好。这是一个持续的挑战，我们将不断总结，以更好地完成需求的需求。万事开头难，一步一步来！</p>
<p>&nbsp;</p>
<p>原文链接：https://uxdesign.cc/starting-a-design-system-in-a-start-up-3359f2d4784b</p>
<p>原作者：Ruiwen Tay；</p>
<p>翻译：Scott；公众号：彩云译设计</p>
<p>本文由 @彩云Sky 翻译发布于人人都是产品经理。未经许可，禁止转载</p>
<p>题图来自Unsplash，基于CC0协议</p>
➜想在市场中割的快，又想看起来帅？
http://www.woshipm.com/operate/4175558.html	6231
<blockquote><p>编辑导语：昨天，饿了么上线的新功能冲上热搜——给外卖员多5分钟/10分钟的时间；不少人在微博底下评论，大多数人对饿了么的这一做法持反对的态度，“凭什么平台的问题需要消费者来买单”；本文作者对此进行了详细的分析，我们一起来看一下。</p></blockquote>
<p><img data-action="zoom" class="aligncenter size-full wp-image-4175831" src="http://image.woshipm.com/wp-files/2020/09/YU4HsGcE7nkqalKQeerw.jpg" alt="" width="900" height="420" /></p>
<p>因为人物的一篇文章《外卖骑手，困在了系统里》，引发了网络上很多人的讨论。</p>
<p>所以9月9日凌晨，饿了么表示将上线新功能：在结算付款的时候增加一个「我愿意多等“5分钟/10分钟”的小按钮」。</p>
<p>全文“暖心”文案：系统是死的，人是活的&#8230;&#8230;将心比心，每个努力生活的人都值得被尊重&#8230;&#8230;</p>
<p>但是文章想要讨论和解决的是：数字经济的时代，算法究竟应该是一个怎样的存在？</p>
<p>城市的生活，外卖年轻人的出口问题，涉及更多的“人”和“商业和社会”的问题。</p>
<p>这些问题，饿了么给一个多等十分钟的按钮，全部跳过。</p>
<p>将矛盾转移给消费者，这是饿了么的狡猾：是用户希望可以快一点，所以系统的期望时间，才这么紧张；消费者愿意等、外卖小哥不用拼命、饿了么有钱可以赚。</p>
<p>这就是饿了么所谓的将心比心吗？</p>
<h2>一、做了一辈子坏事，临死前做了一件好事，我们要认可他是一个好人吗？</h2>
<p>平台和骑手双赢。</p>
<p>输的却是消费者，输的却是这个社会人文问题。</p>
<p>买单的是消费者，等待时间花出去的还是消费者，饿了么只给一个按钮，就想要让大家跳过这个问题，博一个良心平台的声响，这不妥当。</p>
<p>这不是饿了么的美德，不值得表扬，不值得夸奖；因为最大受益的依旧是外卖平台本身，只是转移了事情的矛盾，这不是良心。</p>
<p>饿了么及时做出调整应对，是一个好态度；但是这件事，现在看起来更像是平台公关，追捕舆论热点的手段。</p>
<p>不仅是饿了么，包括美团在内的外卖平台，应该正向面对市场本质的问题上来；而不是指标不治本，上演一场假人文关怀的秀。</p>
<p>原本就是系统时间太赶，外卖平台的商业模式下衍生出来的问题；平台能不能多投入时间、精力、人力，去做系统配送流程的优化？让平台和商家和消费者，三方达到一个更好的相处模式？</p>
<p>别的平台，没有这么做，为了争夺市场，平台们之间就默许了：把价值利益凌驾于这些人文关怀之上。</p>
<p>可能对于外卖平台而言，太关心人文情怀，妨碍外卖平台资本割韭菜的速度，妨碍市场份额争夺的速度了。</p>
<p>饿了么的公关，在凌晨发文，问大家愿不愿意等5或者10分钟；平台自己却不愿意多等一些时间，想一个好的解决方案，再出来蹭这一波热度？</p>
<p>「我催单外卖小哥，导致对方车祸，我是否需要承担法律责任？」在这个问题下面，有律师回复：「没有责任。」</p>
<h2>二、商业的竞争就像是一场战争，情况会激烈，甚至百姓还会流血流泪。</h2>
<p>少赚一点就是亏损？把骑手配送时间的决定权，转交给消费者就是良心？</p>
<p>外卖平台愿意花心思，打造一个更好的利益分配，更为关键。</p>
<p>无论是美团还是饿了么，系统都为骑手设置了积分等级体系——跑的单越多，准时率越高，顾客评价越好，骑手获得的积分便会越高，积分越高，等级就越高，奖励收入也会更多。</p>
<p>外卖平台的骑手，为了迎合平台制造的游戏晋升机制，拿到更多的订单，赚更多的钱。冒着生命危险，和红灯做朋友和死神竞速。</p>
<p>“配送，成为了一种以顾客为中心的社会表演。”孙萍在调查报告中写道，她将骑手们取悦顾客、争取五星好评的行为称为「情感与情绪劳动」；在她看来，这部分的劳动常常被忽视，但它对骑手的折损和消耗，远大于体力劳动；很多骑手拿着1W多的“高薪”，承担的风险，其实已经超过自己的“高薪价值”。</p>
<p>“现在骑手虽然累和危险，你不做，会有大把人来做。”这是原文章中，一位外卖骑手在采访时，大概描述的实际情况。</p>
<p>要想要更快的把订单送到消费者手中，招聘更加多的骑手，不就可以解决了问题吗？每一个区域内，都有合适数量的骑手，这样送外卖的效率一定是更加高，但是外卖平台没有这么做。</p>
<p>因为人一多，月订单数量有限，骑手的薪水会被稀释掉。骑手的“高薪”现象，骑手职位的高竞争力就会被打破。</p>
<p>“高薪”情况一旦打破，骑手可能会没有那么多积极性，平台的支出成本会上升，收益会减低——所以利用马太效应：让拼命和时间赛跑的人，多跑几次。</p>
<p>通过利益驱动来刺激外卖骑手，通过算法数据来控制流程，减少成本，追求最大化的效应，这是资本爱干的；大家都是社畜和工具人，谈人文情怀可能会伤钱。</p>
<p>不久前，美团和饿了么先后公布了2020年第二季度财报；在这一季度，饿了么实现每单盈利转正，而美团则完成了了22亿人民币的净利润，同比增长95.5%；其中，外卖业务是美团实现盈利的最大功臣。</p>
<p>2020年8月24日，美团股价也再创新高，市值突破2000亿美元，成为港股第五大市值公司。</p>
<p>在此次长达半年的调查中，《人物》接触到了近30名外卖骑手，他们频繁提起的一个词却是：一毛钱。</p>
<p>一位湖南的美团骑手说：“准时率低于98%一单扣一毛钱，低于97%一单扣两毛钱；这不就是逼着骑手们加快速度吗？毕竟，一单中的一毛钱对于我们来说，差很多很多的。”</p>
<h2>三、数据算法理应是给社会带来便利，不是成为资本的磨刀石</h2>
<p>每一个普通人都有权利，通过手中的钞票，决定资本的流动方向。</p>
<p>大众是有方向决定权的，但是大众也是容易被诱导的；就像饿了么的延迟5/10分钟按钮键，看似确实是一个人文关怀的按钮。</p>
<p>但是随着数据的足够积累，这个按钮会变成新的收割模式。</p>
<p>站在一个互联网产品经理的视角，这个按钮背后的用户管理标签，在外卖平台的眼中可能是：</p>
<ul>
<li>长期勾选同意的用户，会被标签为“时间不敏感”用户，将来的订单配送时间可能会更长。</li>
<li>长期不勾选同意的用户，会被大数据标签为“时间敏感用户”，可能更加愿意接受加价，更快送达服务。</li>
</ul>
<p>以上，可能是外卖平台，目前不会去真实行动的动作。</p>
<p>但是数据化的今天，这些数据的收集确实会引发这样的情况，这是没有办法避免的；缺少人文，确实是今天互联网发展出来的一个真实现状：各种软件杀熟、诱导关注、吸引点击。</p>
<p>我们的善良，可能有成为资本继续使坏的底气：平台继续利用算法追逐利益，去玩数据游戏，去争夺市场份额。</p>
<p>其实外卖平台自己都清楚，问题其实不在于：5/10分钟的等待。</p>
<p>真正的问题一直都是在资本驱动下，市场不允许低效，不允许休息，不允许外卖员的剩余劳动价值被“浪费”；换句话说，真的问题是：外卖平台不想少挣一点——所以，饿了么的“时间等待按钮”，我个人不愿意使用。</p>
<p>&nbsp;</p>
<p>本文由 @阳俊Orlo 原创发布于人人都是产品经理，未经作者许可，禁止转载。</p>
<p>题图来自 unsplash，基于 CC0 协议</p>
➜逻辑回归在目标用户挖掘方面的应用
http://www.woshipm.com/data-analysis/4175565.html	6283
<blockquote><p>编辑导读：企业为了更精准地定位用户，通常会开展自己的用户洞察项目。既包括分析现有用户特征，也包括寻找符合目标特征的用户。更进一步，想要针对用户进行精细化运营，则可以用逻辑回归算法。本文对此进行了五个方面的分析，希望对你有帮助。</p></blockquote>
<p><img data-action="zoom" class="size-full wp-image-4175829 aligncenter" src="http://image.woshipm.com/wp-files/2020/09/R0KPY8Mfj0W58ybqS8ol.jpg" alt="" width="900" height="420" /></p>
<p>随着用户数据的丰富，越来越多的公司开始开展自己的用户洞察项目。所谓用户洞察，其输出主要是两种，其一是现有用户的画像：通俗的讲就是通过现有用户群去分析自己的目标用户特征；其二是目标用户的挖掘：以用户画像为标准，去寻找符合目标特征的用户。</p>
<p>而这里的目标落实到业务层面，其实可以是正面的也可以是负面的。正面的如注册目标、活跃目标、下单目标、复购目标等，毫无疑问，找到这些意向的用户，能帮助我们提升业绩；而负面的流失目标、沉睡目标、投诉目标，也自有其价值，我们预先知道可能产生这类行为的用户，就能未雨绸缪提前做好应对措施。</p>
<p>但是如果仅仅知道用户是否是我们的目标用户还不够，我们还需要知道其意向度。比如同样是下单目标用户：60%的下单可能和90%的下单可能，对我们的价值肯定是不一样的。从精细化运营考虑，这两个用户有必要采用不同的运营策略。</p>
<p>而要想在给用户进行分类的同时，又想知道他属于某个类的置信度，那逻辑回归算法能较好的满足我们的需求。</p>
<blockquote><p>逻辑回归（Logistic Regression）是一种用于解决二分类（0 or 1）问题的机器学习方法，用于估计某种事物的可能性。比如某用户购买某商品的可能性，某病人患有某种疾病的可能性，以及某广告被用户点击的可能性等。</p></blockquote>
<p>这次我们以挖掘某出行类产品的用户下单意向为需求，来介绍逻辑回归算法的实际应用。</p>
<h2>一、需求背景</h2>
<p>基于现有用户的下单情况，来预测新用户的下单的可能性。</p>
<h2>二、特征圈定</h2>
<p>首先我们要根据经验圈定出可能对用户下单产生影响的特征。</p>
<p>我们可以将相关特征分为通用特征和业务特征。通用特征即无论分析何种场景都可以参考的特征，业务特征指仅适用于具体分析场景的特征。</p>
<p>因为此次分析的场景是：分析用户租赁汽车类出行工具的可能性，其相关特征可以从如下几方面考虑。</p>
<p>通用特征：</p>
<ul>
<li>性别</li>
<li>年龄</li>
<li>所在地</li>
<li>经济水平</li>
</ul>
<p>业务特征：</p>
<p>对于汽车租赁类产品，用户租赁的目的一是日常上下班代步，二是节假日出行。</p>
<p>那么基于上下班代步需求，他的业务特征可以是：</p>
<ul>
<li>公司——家的通勤距离</li>
<li>非驾车出行时的通勤时长</li>
</ul>
<p>而节假日出行，可提炼的特征：</p>
<ul>
<li>出行频次</li>
<li>出行距离</li>
</ul>
<p>除此之外，还有一种特征我们也需要考虑：APP用户行为。</p>
<h2>三、特征数据获得</h2>
<p>“巧妇难为无米之炊”，要想做数据挖掘前提必然是有足够的数据源，而数据的获得可以分为自有和外采两类。</p>
<p>对于大部分的通用特征，我们往往通过注册、身份认证等渠道可以让用户主动给提供。而经济水平特征的获得可以通过短信分析，若用户未授权的短信权限的话，也可以通过所居住小区的平均房价预估用户经济水平。用户小区通过夜间GPS定位判断，房价则可以通过爬虫获得。</p>
<p>业务特征中的APP用户行为，可以通过APP埋点获得，用户的访问路径：注册-登录-首页-车辆列表页-车辆详情页-预订页-支付页等等。而通勤距离时间、节假日出行这些数据，可以通过向第三方采购。移动联通这种通讯公司往往可以通过信号基站获得用户的这类数据。</p>
<h2>四、建立基模</h2>
<p>我们圈定了凭经验推测的特征数据后，就可以进行建模了。上述的特征虽说是我们全凭经验所得，并不一定都会影响用户下单。即使有所关联，其相关程度也会分个三六九等，而且可能特征与特征之间也会有一定的相关性，所有这些问题，我们后续都需要进行相应处理。</p>
<p>但是这些并不影响，我们先用所有特征构建一个基础模型，得到最原始的拟合情况，作为我们后续不断调整的一个参照组。</p>
<h2>五、特征工程</h2>
<h4>1. 数据标准化</h4>
<p>很多算法对特征的数量级都是敏感的，逻辑回归也不例外。因此，我们最好将数据集中的特征转换成相同的量纲，从而消除不同量纲对算法造成的负面影响，我们将这个过程称为数据标准化。</p>
<p>实际上，即使原本数据的量纲已经是一样的了，多一步标准化也不会产生负面影响。</p>
<p>在scikit-learn中，常用的标准化方式为：</p>
<ul>
<li>均值标准差标准化（StandardScaler）</li>
<li>最小最大值标准化（MinMaxScaler）</li>
</ul>
<h4>2. 去除多重共线性</h4>
<p>在多元线性回归中，自变量与应变量应该要存在线性关系，但是如果自变量之间存在线性关系，那么这种情况我们就称之为多重共线性。多重共线性会造成权重的不稳定性，甚至会出现拟合后的权重与相关系数呈现相反的结果。</p>
<p>不过多重共线性并不会影响拟合优度，如果我们仅追求模型的拟合优度，而不考虑权重系数的大小，则可以不处理多重共线性。</p>
<p>我们一般使用方差膨胀系数（VIF）来检测多元线性回归中的多重共线性。如果变量之间存在多重共线性，则得到的VIF值就会较高，当VIF值大于10时，就意味着存在严重的多重共线性。</p>
<p>VIF的计算我们可以直接调用python的statsmodels.stats.outliers_influence 包里的variance_inflationfactor方法。</p>
<h4>3. RFECV特征选择法</h4>
<p>在建立模型时，特征并非越多越好，有些特征可能对模型质量没有什么改善，我们可以直接删除这类特征，所以特征选择是建模非常重要的一个环节。</p>
<p>特征选择的方法很多，这次我们介绍RFECV方法。</p>
<p>RFECV分成两个部分：</p>
<ol>
<li>RFE:递归特征消除，用来对特征进行重要性评级</li>
<li>CV：交叉验证，在特征评级后，通过交叉验证，获得最佳数量的特征</li>
</ol>
<p>其具体过程如下：</p>
<p>RFE阶段：</p>
<ol>
<li>初始的特征集（若之前操作有进行特征删除，则最新的特征为初始特征集）作为所有可用的特征</li>
<li>使用当前特征进行建模，然后计算每个特征的重要性</li>
<li>删除最不重要的一个（或多个特征），更新特征集</li>
<li>跳转到步骤2，直到完成所有的特征重要性评级</li>
</ol>
<p>CV阶段：</p>
<ol>
<li>根据RFE阶段确定的特征重要性，依次选择不同数量的特征</li>
<li>对选定的特征进行交叉验证</li>
<li>确定平均分最高的特征数量，完成特征选择</li>
</ol>
<p>在上述多步清洗操作过程中，我们可以每完成一个环节，看一下新模型的拟合优度。有时候处理的步骤并非越多，拟合优度就越好。我们可以根据实际需要，选择合适拟合优度的模型，对那些未下单用户进行预估，得到其最终下单的可能性。</p>
<h3><strong>＃专栏作家＃</strong></h3>
<p>唐豪杰，人人都是产品经理专栏作家，微信公众号：弈呓（ID:YiYi_TANG7980)，互联网运营从业</p>
<p>本文由 @唐豪杰 原创发布于人人都是产品经理，未经许可，禁止转载</p>
<p>题图来自 Unsplash，基于 CC0 协议</p>
➜Github增长案例分析
http://www.woshipm.com/it/4175410.html	6463
<blockquote><p>编辑导语：GitHub于2008年4月10日正式上线，是一个面向开源及私有软件项目的托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 GitHub。目前，其注册用户已经超过 350 万，托管版本数量也是非常之多，其中不乏知名开源项目 Ruby on Rails、jQuery、python 等。接下来，本文作者就为我们详细地分析了Github的增长案例。</p></blockquote>
<p><img data-action="zoom" class="aligncenter size-full wp-image-4175426" src="http://image.woshipm.com/wp-files/2020/09/XjFgbifAbL0y4NOyzqln.jpg" alt="" width="900" height="420" /></p>
<h2>一、Github</h2>
<p><img data-action="zoom" class="rich_pages js_insertlocalimg aligncenter" title="Github 的增长案例" src="http://image.woshipm.com/wp-files/2020/09/Py5TpeFylWsHpSbJQgtV.jpeg" alt="Github 的增长案例" width="251" height="171" /></p>
<p>如果你是一名紧随潮流的编程技术人员，一定不会不知道 Github这个全球最大的编程社区及代码托管网站。Github以其开创性的全新开发协作方式，以及现成的海量免费代码资源，正在赢得全球越来越多极客的追捧。</p>
<p>Github在2008年成立于美国旧金山，联合创始人有三位。</p>
<p>它最早是以“周末项目”的性质玩票登场的，上线一年后获得了第一个10万用户。2012年7月， Github筹得了1亿美金投资，估值7.5亿美元。同年，福布斯将其评选入全球十大科技公司。</p>
<p>到了2013年， Github已拥有300万用户，创建了490万个代码仓库（Repositories）。年底时，代码仓库数量更是突破千万大关。</p>
<p>当时的官方博客记载道：“代码仓库数量 突破第一个100万，花费了将近4年时间而从900万到1000万，仅用了48天。事实上，其中有550万个代码仓库都是在今年一年之内创建的。</p>
<p>截至目前， Github的知名客户已包括白宫官方网站亚马逊、Twitter、Facebook、LinkedIn等。随着Github的走红，它的吉祥物章鱼猫(Octocat)也成为流行文化符号，被印在了贴纸和T恤衫上，成为代码牛人自我标榜身份的象征。</p>
<h2>二、Github是如何发展起来的</h2>
<h3>1. 解决实际问题</h3>
<p>说起 Github就不得不提Git技术，这是Linux之父林纳斯·托瓦兹(Linus Torvalds)为Linux内核开发的一种版本控制工具，一经推出就迅速流行开来，打败了此前其他的固有解决方案，被视作版本控制软件的一次全新进化。</p>
<p>Git虽然功能强大，理念前卫，但并不那么平易近人，普通开发人员上手还是有一定成本的。</p>
<p>Github的创始人之一普雷斯顿·维尔纳(Preston Werner)就注意到了Git在协作开发方面的短板，于是在一次当地的编程会议之后邀约了克里斯·瓦茨特拉斯( Chris Wanstrath)，二人在一间运动酒吧里讨论起改进Git的想法。</p>
<p>在随后的周末业余时间里，他们开发出了Github。</p>
<p>Github从创立伊始，就瞄准了Git无法满足的需求，并且融入了自己的亮点特性，比如复制代码分支(Fork)、拉拽请求(Pull Requests)、合并代码(Merging)等。</p>
<p>在Github之前，人们如果想协作编写代码，需要先手动下载他人提供的代码包；在本地编写完成后，通过电子邮件等以“补丁包”的形发给原作者，原作者再从头到尾自行审验一遍“补丁包”，看是不是能够混合到原来的代码中而不会出错。</p>
<p>有了 Github，这一切简化到极致。</p>
<p>人们只需要从任何公开的代码仓库中复制代码到自己的账号下，就可以展开编辑，编辑完成后会有相应的改动记录；修改好的代码只需给原作者发一个拉拽请求，原作者如果检查改动记录没有问题，就能直接将代码合并到原文件中，从而实现了基于集体智慧的编程创作。</p>
<p>相比原来的解决方案， Github提供的服务不仅简化了操作步骤，而且将原本混乱的代码协作工作管理得井井有条，并且能量化追踪。</p>
<p>在任何人都能够将代码开源贡献给全世界，同时通过学习他人的代码提升自己的编程技巧。</p>
<h3>2. 网络效应积聚人气</h3>
<p>Github的服务本身切中需求，吸引了最早一批的种子用户的入驻。</p>
<p>这些敢于第一个吃螃蟹的先行者们，也都是一群嗅觉敏锐、头脑灵活、乐于尝试新鲜事物和公开分享的极客工程师，他们的活跃带动了社区氛围的提升，越来越多人开始用Github托管自己的项目。</p>
<p>而正是由于越来越多的开源代码被提交至Github，使得这里成为人们寻找编程灵感、翻查现成代码的不二选择。</p>
<p>在Github，新人们彼此经过交流，很快能学会如何在这里创建仓库、复制代码、提交问题反馈。更多人意味着更多的代码资源量，也意味着整个社区的价值对所有人而言变得更大——这正是网络效应的体现“用的人越多就越好用”。</p>
<p>与此同时，由于Github上高手云集，企业主也开始认可它对于发掘技术牛人的价值，猎头们甚至将一个工程师的Github个人资料页面作为衡量其能力的参考依据。</p>
<p>这让人们更加乐于经营自己的页面，频繁地提交更多高质量的代码。也有人开始探寻一些“非主流”用法，比如在 Github上写博客。所有这些花样百出的现象都显示出这里已经成为了极客们的乐园。</p>
<h3>3. 免费带动收费</h3>
<p>每一家公司在业务有起色后都面临着盈利的问题，像 Github这样提供文件存储和传输的服务，在每个月的账单上通常都是一笔不小的数额。</p>
<p>创始人维尔纳此前在效力网络头像服务Gravatar时学到的经验之一，就是免费向用户提供高成本的服务却从不做任何盈利方面的打算，这完全等同于是在慢性自杀。</p>
<p>幸运的是， Github在寻找商业模式的道路上并没有花太多功夫。</p>
<p>早期的Github允许用户分别创建公开的代码仓库和私密的代码仓库，后者尤其为企业用户带来了方便。不久，有的企业用户邮件询问能否花钱享受更加定制化的私密代码仓库服务。</p>
<p>从那一刻起，他们意识到Github恐怕不仅仅是能回收成本，更能成为一个真正的大生意。于是经过研究，创建公开的代码仓库继续保持免费，而创建私密的代码仓库则改为了收费——向那些乐意为此掏钱的人。</p>
<p>目前 Github的收费模式已经非常成熟，免费用户允许创建最多10个公开的代码仓库，不能创建私密的，而付费用户则没有该限制，并且可享受更多专业服务。</p>
<p>同时，Github也有专门为大型企业客户准备的付费服务，足以支撑百万级别的用户量，付费客户包括微软、沃尔玛、VMware等。</p>
<p>Github用这个收费策略，巧妙地向有高级需求且有付费能力的客户收到了钱，而并没有令绝大部分免费用户感到反感。</p>
<h3>4. 吸引金牌项目入驻</h3>
<p>在Github诞生之前，即便是有开源想法的企业，要想将代码发布至整个网络，并接受全球无数网友的贡献，整个项目的维护成本是极其高昂的，需要驻派专门的人力来审阅更改后的代码，工作量之大令人望而生畏。</p>
<p>而且，自建代码托管服务的门槛也不低，除了需要有专门的IT人员负责技术支持，还必须有硬件、带宽的投入。种种客观难题，造成了许多公司不愿意在这方面持续投入。</p>
<p>有了Github，大公司托管代码的问题迎刃而解，于是我们惊喜地看到包括Twitter、雅虎等在内的巨头们在其上活跃贡献代码的身影。</p>
<p>网友们得以一窥顶尖公司的技术达人是如何编程的，而已经实现盈利大公司也能通过这种方式回馈开源社区。</p>
<h3>5. 尽早交付</h3>
<p>Github始终秉持着精益创业中“尽早交付”的重要理念。</p>
<p>“我们学到了先交付，再修bug与其遥遥无期地缓慢开发，不如快速交付一版，看用户们会怎样使用它。”瓦茨特拉斯解释说，“你不可能永远都是对的也没有什么是完美的，所以尽早交付绝对是有百利而无一害。你可以看到人们实际是如何在网站上操作的，并且有针对性地做出应对。取消某个功能会招致反对吗？某个之前你未想到的功能是否有普遍性？你一直担心的那个Bug被别人撞上了吗？现在都能看得真真切切。”</p>
<p>其实从一开始创立， Github就是这样一个持续快速交付的产物，创始人一边开发，一边亲自体验试用，衡量它究竟好用不好用。最早的一批种子用户，也是来自创始人身边的朋友。</p>
<h3>6. 打造高黏度社区</h3>
<p>整个 Github的社区黏度很高，这点毋庸置疑。</p>
<p>平台上每天会产生海量次数的代码复制、提交、合并操作，不少开发者每周都会花大量时间沉浸其间，研究学习。</p>
<p>Github也在通过不断探索产品特性来继续提升用户黏性，例如各种优质代码和开发者的发现入口，榜单就是其中之一。他们还推出了主页服务，允许每个开发者开设以自己用户账号命名的个人页面，提供形如xdash.github.io的级域名。</p>
<p>有人索性直接将独立博客程序架到这里，记录起了自己的衣食住行柴米油盐。这成为爱折腾的工程师追随Github的又一理由。</p>
<h3>7. 不断拓展的业务平台</h3>
<p>由于完美地解决了多人协作交流之间的问题， Github如今已具有平台的效应，成为了行业标准。工程师求职投简历时，都会自觉附上Github主页链接，与编程开发相关的网站也常见到“用Github账户登录”的按钮。</p>
<p>公司利用它物色有潜质的新人，个人也可以在这里实现有趣的想法。</p>
<p>创始人在访谈中谈到：“许多大公司的团队合作效率非常低下，我们想改变这一切。虽然 Github是为了管理代码而生的，但如今也已在越来越多的场合里被广泛运用，比如管理图书、硬件项目、电路图，以及法律文书等任何可以以数字方式被记载下的内容。”</p>
<p>Github不仅是一种工具，更是一种自由、平等分享精神的象征。人们相互借鉴，取长补短，通过点滴贡献聚沙成塔，共同创造出更美好的事物。</p>
<p>这一颠覆性的协作方式，最终将会从二进制的代码世界，逐步渗透到产品设计、医疗制造、电影电视、图书出版、音乐舞蹈、烹饪美食等任何创造性的行业，为这个世界带来更加无穷大的可能性。</p>
<h3>#专栏作家#</h3>
<p>王得宇AIPM；公众号：他们已经在路上了（ID：PM-Silence），人人都是产品经理专栏作家</p>
<p>本文原创发布于人人都是产品经理。未经许可，禁止转载</p>
<p>题图来自Unsplash，基于CC0协议</p>