➜实时光线追踪（real-time ray tracing）技术还有哪些未攻克的难题？
http://www.zhihu.com/question/310930978/answer/1606439715?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title	14470
<p>这个问题可以从<b>光线追踪GPU硬件</b>、<b>实时光线追踪渲染技术本身</b>两方面来回答。作为一个从业多年的图形程序员，我想试着主要从实时光线追踪渲染技术本身来谈谈我的看法。</p><p>目前业界主流的实时光线追踪技术，其实本质上采用的是”传统光栅化渲染管线+光线追踪”的混合渲染管线（Hybrid Rendering Pipeline）形式：</p><p><img src="https://pic1.zhimg.com/v2-7437ed3d9b00d1b18f27ff5ecef9964b_720w.jpg?rss" data-rawwidth="1215" data-rawheight="503" data-size="normal" data-caption="Hybrid Rendering Pipeline (图片来自[2]）" data-watermark="watermark" data-original-src="v2-7437ed3d9b00d1b18f27ff5ecef9964b" data-watermark-src="v2-c4e2e142aee6b1c3a6978fc6b0dd991d" data-private-watermark-src="v2-88b478a2f3596c97dc34994e2688e28b" style="max-width: 400px;"></p><p>对于这类混合渲染管线，渲染分类可总结如下：</p><ul><li> 延迟着色（光栅化）</li><li> 直接阴影（光线追踪或光栅化） </li><li> 光照（计算着色器+光线追踪）</li><li> 反射（光线追踪或计算着色器）</li><li> 全局光照（计算着色器+光线追踪）</li><li> 环境光遮蔽（光线追踪或计算着色器）</li><li> 透明与半透明（光线追踪+计算着色器）</li><li> 后处理（计算着色器）<br> </li></ul><p>可以发现，光栅化（Rasterization）依然是目前业界主流混合渲染管线的主要渲染流程，而光线追踪一般仅用于锦上添花的次级光线效果的渲染表达（反射、阴影、环境光遮蔽、半透明渲染等）。</p><p><b>换言之，当前我们所熟知的产品级实时光线追踪技术，其实只是对现有光栅化渲染管线的锦上添花与缝缝补补，现阶段扛大旗的依然是光栅化技术。</b></p><p>也就引出了我们想象中与现实中的实时光线追踪渲染管线的区别：</p><p><img src="https://pic1.zhimg.com/v2-3fa1ef585f7ffe157c458e79c98a29d3_720w.jpg?rss" data-rawwidth="1280" data-rawheight="720" data-size="normal" data-caption="想象中的实时光线追踪渲染管线" data-watermark="watermark" data-original-src="v2-3fa1ef585f7ffe157c458e79c98a29d3" data-watermark-src="v2-d5fb9a147bdab757f49ef78a4f64536a" data-private-watermark-src="v2-8ecbf86ec0ddb0fa21aeb65776aac538" style="max-width: 400px;"></p><p><img src="https://pic1.zhimg.com/v2-8bd4cd20f5d9994345dac8583d5497ad_720w.jpg?rss" data-rawwidth="500" data-rawheight="342" data-size="normal" data-caption="现实中的实时光线追踪渲染管线" data-watermark="watermark" data-original-src="v2-8bd4cd20f5d9994345dac8583d5497ad" data-watermark-src="v2-7607693cfa87a3d68f83e0b9ef4fa828" data-private-watermark-src="v2-db7a939bf6907f5e4ff090704c50a0c0" style="max-width: 400px;"></p><p><br></p><p>所以，如何完全剥离光栅化管线，完成到纯粹基于光线追踪的渲染管线的切换，并可以达到产品级的交互速率，才是实时光线追踪技术最本质和最理想情况下需要攻克的难题。</p><p><img src="https://pic1.zhimg.com/v2-8e65c3141c436d3ba1c800acd2455ee9_720w.jpg?rss" data-rawwidth="1310" data-rawheight="690" data-size="normal" data-caption="Game Graphics Roadmap（图片来自[3]）" data-watermark="watermark" data-original-src="v2-8e65c3141c436d3ba1c800acd2455ee9" data-watermark-src="v2-d5b869d16bdcedadfbf121905bcd34fb" data-private-watermark-src="v2-f66fafaa297c1aba5383e5e6de7986c8" style="max-width: 400px;"></p><p>当然，在完成一次高品质离线渲染动辄需要数小时的今天，要让纯粹基于光线追踪的渲染管线完全实时化，业界还有太长的路要走。Hybrid Rendering Pipeline依然是未来很多年实时光线追踪技术承载的主要技术形态。</p><p>而正如其他答主所述，当前发布的实时光线追踪技术，从渲染策略而言，大多是通过降低每像素采样数量，然后配合降噪技术与数字信号处理技术，以在有限的算力下实现类似真实表现的渲染结果。在当前的这套技术形态下，产品级的光线追踪反射、光线追踪环境光遮蔽、光线追踪阴影等传统光栅化技术难以处理的全局效果，表现都已相当令人惊艳。</p><p><img src="https://pic1.zhimg.com/v2-334eec5eeb4dd766a9d7ad76865b1c67_720w.jpg?rss" data-rawwidth="1416" data-rawheight="642" data-size="normal" data-caption="当前产品级的实时光线追踪技术特性" data-watermark="watermark" data-original-src="v2-334eec5eeb4dd766a9d7ad76865b1c67" data-watermark-src="v2-043b82eb22bafe671d6a20bb9812877e" data-private-watermark-src="v2-baa40d122560f43a3d74e471dac342b2" style="max-width: 400px;"></p><p><br></p><p><img src="https://pic1.zhimg.com/v2-3cdc97b2604c20fb2ba1ff67ef4ec854_720w.jpg?rss" data-rawwidth="1440" data-rawheight="810" data-size="normal" data-caption="Cyberpunk 2077中的实时光线追踪渲染表现" data-watermark="watermark" data-original-src="v2-3cdc97b2604c20fb2ba1ff67ef4ec854" data-watermark-src="v2-6237dc3422f61226086ff5856d4ed3aa" data-private-watermark-src="v2-48236204190ad13a7f781b4412fff43e" style="max-width: 400px;"></p><p>当然，在当前的这套Hybrid Rendering Pipeline架构中，依然也存在不少需攻克的渲染技术细节。</p><p>从宏观而言，我们在渲染中处理的四要素有：</p><ul><li> 材质（Materials）</li><li> 几何体（Geometry）</li><li> 光照（Lights）</li><li> 采样（Sampling）</li></ul><p>其中的每一种要素对实时光线追踪而言都有独特的挑战与难题需要攻克。如果完全展开来讲，可能需要较大的篇幅，这里不妨对其中面临的一些典型难题做一个盘点。</p><p><br></p><h2>1、透明渲染问题</h2><p>在目前的实时光线追踪领域，在每像素1~2个样本的情况下，大多数降噪技术通常对于透明渲染、粒子渲染、体积渲染的渲染效果都并不算好。在EA的PICA PICA Demo[2]中，虽然采用了具有折射和散射的纹理空间OIT（texture-space OIT）技术，但也并不完美，存在时域（temporal）方面的问题。</p><p>当下业界需要研究出更好的降噪技术或者相关方案，以在较低的每像素采样数下带来更佳的透明渲染品质。这即是业界目前未攻克的难题之一。</p><p><img src="https://pic1.zhimg.com/v2-1d505136cab93fce68fd80d81ee1693f_720w.jpg?rss" data-rawwidth="1268" data-rawheight="714" data-size="normal" data-caption="当今降噪算法在较高每像素采样数下才具较好的透明降噪表现 （图片来自Blender）" data-watermark="watermark" data-original-src="v2-1d505136cab93fce68fd80d81ee1693f" data-watermark-src="v2-3f8fbaebf07ca551783b12eb112b657b" data-private-watermark-src="v2-21c6abb91e979430c38904cd32607ca4" style="max-width: 400px;"></p><p><br></p><h2>2、部分覆盖渲染问题</h2><p>类似上文提及的透明渲染降噪，植被渲染中使用的部分覆盖（partial coverage）方法也会遇到相同的问题。一般情况下，我们可以在命中着色器中进行alpha测试，但镜头一旦移动，就会遇到性能和表现上的问题。主要原因依然在于目前的降噪技术并不能很好的处理这种实时的部分覆盖在每像素1~2样本下的可见性判定。这也是业界目前未攻克的难题之一。</p><p><img src="https://pic1.zhimg.com/v2-2ce237f2def47aa4f449b2a743655039_720w.jpg?rss" data-rawwidth="1269" data-rawheight="714" data-size="normal" data-caption="" data-watermark="watermark" data-original-src="v2-2ce237f2def47aa4f449b2a743655039" data-watermark-src="v2-e43d46f0e2c10bcacf039f40aad4b8c2" data-private-watermark-src="v2-b870b8151b60e48d7b2c35b2309eb478" style="max-width: 400px;"></p><p><br></p><h2>3、粒子系统的渲染问题</h2><p>使用实时光线追踪渲染粒子系统的主要问题在于，粒子一般为朝向相机的公告板，如果进行反射，则会出现如下视觉失真现象：</p><p><img src="https://pic1.zhimg.com/v2-5ba740024805edb9039b684ac4b0824a_720w.jpg?rss" data-rawwidth="1124" data-rawheight="884" data-size="normal" data-caption="出现表现失真的粒子系统（图片来自[1]）" data-watermark="watermark" data-original-src="v2-5ba740024805edb9039b684ac4b0824a" data-watermark-src="v2-5fdbafa26242d9e111cf82627093d1bb" data-private-watermark-src="v2-c1134654c6f30bab21daa69ff7c1b3fc" style="max-width: 400px;"></p><p>对于光线追踪粒子系统的此类渲染问题，一般的方案是维护两个顶层加速结构（Top Level Acceleration Structures, TLAS），而《战地5》中的解决方案是将粒子朝向光线，有点类似billboard的思想。其中，《战地5》中的方案已是业界目前提出的最佳方案，但依然会有一定程度的失真：</p><p><img src="https://pic1.zhimg.com/v2-4c632970f2644f8f9c64d810331ccc21_720w.jpg?rss" data-rawwidth="1123" data-rawheight="884" data-size="normal" data-caption="《战地5》中的粒子系统渲染方案依然存在一些失真（图片来自[1]）" data-watermark="watermark" data-original-src="v2-4c632970f2644f8f9c64d810331ccc21" data-watermark-src="v2-74c66b6448aca54bf60281d26f01b6bc" data-private-watermark-src="v2-4fef07760150807285d24daeed51ed23" style="max-width: 400px;"></p><p>另外，由于固有的动态特性，一些粒子系统必须在加速结构中每帧更新。在少许大型粒子或许多小型粒子上都可能会发生这种更新，因此对于这些粒子系统来说，优化空间加速度结构以快速在整个世界中进行光线追踪则是另一项挑战。</p><p>所以，实时光线追踪中对粒子系统更真实的渲染，同样是当前未攻克的难题之一。</p><p><br></p><h2>4、全局光照领域的渲染难题</h2><p>首先，使用实时光线追踪进行全局光照，会遇到即使在离线渲染中也存在的各类开放性问题。比如离线渲染中暂未解决的过高方差，小孔全局光照（Pinhole GI）等问题，这些在实时光线追踪领域目前同样需要解决。</p><p>而且离线渲染方案中的许多解决方案，不一定都可以运用到实时渲染中。对于实时光线追踪，目前而言必须借助缓存技术摊销着色成本，来达以交互速率进行渲染的性能要求。</p><p><img src="https://pic1.zhimg.com/v2-f2d66e2c6ebd51ec355189fb7e5d1fb5_720w.jpg?rss" data-rawwidth="1200" data-rawheight="725" data-size="normal" data-caption="基于实时光线追踪全局光照的场景（图片来自NVIDIA）" data-watermark="watermark" data-original-src="v2-f2d66e2c6ebd51ec355189fb7e5d1fb5" data-watermark-src="v2-26f2549e61eba1f55373b5c54eb6924c" data-private-watermark-src="v2-9736cd133e7cb9e2db0223ae70843dce" style="max-width: 400px;"></p><p>即便是EA出品的当前较先进的PICA PICA Demo[2] 中使用的基于面元缓存GI（caching of GI via surfels）的方案，也存在仅能在观察区域生成面元（surfel）的问题。</p><p>所以基于实时光线追踪技术的全局光照，目前仍然有大量的难题待解决，需要业界共同努力去攻克。</p><p><br></p><h2>5、一致性与非一致性难题</h2><p>关于一致性与非一致性难题，不妨看一张图：</p><p><img src="https://pic1.zhimg.com/v2-5ce9d69abbe55f565d607acb75c171d7_720w.jpg?rss" data-rawwidth="1282" data-rawheight="531" data-size="normal" data-caption="光线的一致性与非一致性问题（图片来自[3]）" data-watermark="watermark" data-original-src="v2-5ce9d69abbe55f565d607acb75c171d7" data-watermark-src="v2-fafae3816dd3cb622a0aedb22684fd9c" data-private-watermark-src="v2-6183644df794c66a037474fe3918890e" style="max-width: 400px;"></p><ul><li> 当光线路径如类似具有一致性（Coherent）的左图时，对蒙特卡洛方法而言收敛速度最快。</li><li> 当光线路径如类似具有非一致性（Incoherent）的右图时，对并行处理器而言运行效率最高。<br> </li></ul><p>且一般来说，更好的处理一致性问题是提升实时光线追踪性能的关键。相邻的光线可以执行类似的操作和内存访问，从而带来较好的性能表现，而有些光线可能会破坏缓存的一致性，从而影响整体性能。</p><p>但从反过来说，光线间的不一致性却可以提高蒙特卡洛方法的收敛速度。</p><p>可以将这个棘手而两难的问题归纳为理论与系统，或者数学与工程间的碰撞。而实时渲染中最重要的问题，正是协调、权衡与处理这种脱节。</p><p><br></p><h2>6、其他</h2><p>另外，也列举一些目前已有一定进展，且仍然需完善的通用领域，可以将它们分为调度问题（Scheduling）、解耦问题（Decoupling）、整体性渲染问题（Holistic Rendering）三大类：</p><ul><li><b> 调度问题（Scheduling）</b></li><ul><li> SIMD一致性（SIMD coherence）</li><li> 数据缓存一致性（data cache coherence）</li><li> 指令缓存（Instruction cache）</li><li> 占用率（occupancy）</li><li> 磁盘即时流式传输（just-in-time streaming from disk）</li></ul></ul><p><br></p><ul><li><b> 解耦问题（Decoupling）</b></li><ul><li> 重用跨路径与跨帧的中间结果（Reuse of intermediate results across paths and     frames）</li></ul></ul><p><br></p><ul><li><b> 整体性渲染问题（Holistic Rendering）</b></li><ul><li> 准蒙特卡罗与多重重要性采样协同感知（Cooperative perceptual QMC/MIS）</li><li> 多光源采样（many light sampling）</li><li> 预滤波（prefiltering）</li><li> 降噪（denoising）</li></ul></ul><p>而以上各类细分领域当中，都有大量悬而未决的问题需要业界共同解决。</p><p><br></p><h2>总结</h2><p>综上所述，实时光线追踪技术在其发展的长河中，目前依然处于早期的萌芽阶段，还有海量的难题等待我们去攻克。而随着未来硬件与渲染技术的不断革新，一个完全属于实时光线追踪的新纪元，即将来临。</p><p><img src="https://pic1.zhimg.com/v2-a32e5109c46920f6220c93fe04ca9fa6_720w.jpg?rss" data-rawwidth="1366" data-rawheight="767" data-size="normal" data-caption="图片来自NVIDIA [3]" data-watermark="watermark" data-original-src="v2-a32e5109c46920f6220c93fe04ca9fa6" data-watermark-src="v2-931b1d37cae400aca4546943f0ab44a2" data-private-watermark-src="v2-6cd2a177bfce5b1a0cff7f40c0742595" style="max-width: 400px;"></p><p><br></p><h2>Reference</h2><p>[1] [GDC 2019] It Just Works Ray-Traced Reflections in Battlefield V</p><p>[2] [SIGGRAPH 2019] State-of-the-Art and Challenges in Game Ray Tracing, Are We Done With Ray Tracing</p><p>[3] [SIGGRAPH 2019] From Raster to Rays in Games</p><p>[4] [SIGGRAPH 2019] Acceleration Data Structure Hardware</p><p>[5] [Digital Dragons 2018] Stochastic All the Things - Raytracing in Hybrid Real-Time Rendering</p><p>[6] [SIGGRAPH 2018] Modern Graphics Abstractions &amp; Real-Time Ray Tracing</p><p>[7] [SIGGRAPH 2018] Game Ray Tracing State-of-the-Art and Open Problems</p><p>[8] <a href="//link.zhihu.com/?target=https%3A//developer.nvidia.com/rtxgi" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">developer.nvidia.com/rt</span><span class="invisible">xgi</span><span class="ellipsis"></span></a></p><p>[9] <a href="//link.zhihu.com/?target=https%3A//pbrt.org/gallery.html" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">pbrt.org/gallery.html</span><span class="invisible"></span></a></p><p>[10] Real-time rendering 4th [M]. Crc Press, 2019.</p><p>[11] <a href="https://zhuanlan.zhihu.com/p/102397700" class="internal"><span class="invisible">https://</span><span class="visible">zhuanlan.zhihu.com/p/10</span><span class="invisible">2397700</span><span class="ellipsis"></span></a></p><p><br></p><p>同时也发布一条招聘信息，欢迎充满热忱，热爱游戏开发的人才们一起开发更高品质的游戏：</p><ul><li>腾讯互娱天美工作室长期招聘硬核渲染/引擎/GamePlay程序 &amp; Technical Artist</li><li>实习生/社招/校招均可</li><li>写实/风格化画风、Unity/UE4均有硬核岗位在招</li><li>简历请发送至：williammao@tencent.com</li></ul>