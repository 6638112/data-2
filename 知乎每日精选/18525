➜如何看待阿里巴巴的「阿里游戏」升级为独立事业群，与大文娱平级？
http://www.zhihu.com/question/421756829/answer/1482456127?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title	10809
<p>在我看来，阿里的全面入场，象征意义或者说里程碑意义是很大的。</p><p>目前来说，前三巨头BAT已经全部进入游戏赛场，后三巨头TMD（现在好像也不这么说了）里，头条也入场了。假以时日和巨头们的资金能力，在未来3-5年内，获得当前大家谈论互联网行业时候一样的定位。</p><p>从外部看，有几个因素让阿里下定决心进入这个领域：</p><p><b>游戏是一个现金流友好的生意</b></p><p>游戏上线之后，现金的回收是相对而言较快的。用阿里的两款大爆款《三国志：战略版》和《三国志幻想大陆》都是买量回收快，带来极高倍收益的产品。而这两款产品的彻底成功，让阿里能够做出决定，往游戏持续投入重注。</p><p>此外，IAP的消费模式，决定了单用户收费是理论上无上限的，此前阿里的文娱打法，本质上是按位收费，铺出海量，之后收有粘性用户钱。铺量前期的补贴要钱，后期防流失，拉新都需要持续产生高质量内容，相对没那么可控。</p><p>当然，现金流友好这点非常多的制作人未必同意，之前跟一位朋友就在知乎争辩过。我当时说，只要产品好，买量合理，基本不可能亏钱。人家举了很多例子说明买量上了也可能颗粒无收。</p><p>我后面跟几个业内大佬聊这个问题，确实产品的最终质量并不是一个容易控制的事情，尤其是在一些非完美数据化的品类，存在类似的情况。</p><p>而卡牌和SLG恰好是两个数据可控的品类。那么在买量大胆，质量合格，玩法还行（三国志实际上是改进版率土，而幻想大陆是少年三国志的思路，都是三国）的情况下，达成一个不错现金回收是可见的。而实际上中国玩家的可满足度又低，那爆了的数据就又可以推一把了。</p><p><b>游戏是一个全球化友好的生意</b></p><p>虽然大多数网友现在可能已经觉得全球化企业不是什么褒义概念了，但全球化本身是一个非常重要的企业增长方向。游戏又恰好是一个不太需要在地运营的事情，最多有个办公室对接当地供应商就行了。</p><p>与传统的内容产品（影视音乐等）相比，游戏“可玩”的属性要大于本身的文化属性。腾讯做出PUBG Mobile或者CODM的时候，需要的文化投入，要比做一个其他类型的国际性娱乐IP投入的少很多。说得黑一点，我们现在都能在市场上看到很多机器翻译的产品，这并不妨碍他们在国际市场上做大。</p><p>而且现在做海外发行这件事情本身，是简单的。就算是三国志战略版这种东西，都可以往日本或者东南亚发，获得可观的收入。而要是跟Google或者苹果多合作一些的话，更有定制化业务奉上。（IDFA？往下看）</p><p>而你真要做好全球化的发行，其实需要的也无非是产品过硬和好的本地化。包括本地的供应链，跨国管理等事情，其实需要花的精力/金钱占比也没那么大。</p><p>相对轻度的成本做全球化，我想除了游戏之外没有更好的行业了。</p><p><b>游戏是有无限可能的内容生意</b></p><p>游戏本身是靠产品取胜的。而且产品本身不会因为你公司的规模大小而变化。</p><p>这就导致了这个行业很难被彻底垄断。只要东西好玩，那未来就一定有机会。而且也存在默默无名一段时间后，突然火起来的事情（比如近期的Among Us）。</p><p>-</p><p>而这势必导致几个潜在的机遇和挑战</p><p>机遇来看：</p><ol><li>对从业者来说，以后跳槽的目标会大一些。此前阿里游戏其实一直在招人，但大家疑惑还是多（可能灵犀除外吧）。现在大家可能会更放心跳槽了</li><li>扩招是肯定的，据我所知阿里游戏现在也就二十多个项目，肯定会扩。这波是大家进入这行业的一个好机会。</li></ol><p>挑战来看：</p><ol><li>小CP肯定又要被收一波，内容供应商少的情况越来越严重。</li><li>二线厂商收到的长期压力肯定会大。</li></ol><p>-</p><p>哎答得跟咨询面试套路似的，但就这样吧。我觉得我现在的状态没法彻底带入一个玩家的视角了，想想还是有点悲哀。</p>
➜《原神》部分效果的个人理解
http://zhuanlan.zhihu.com/p/246531456?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title	14410
<h2>注意，注意：</h2><p>各位看官，很荣幸诸位能赏脸过来捧个人场。能留言评论的各位小伙伴，我就更感激了。但还请各位在评论的时候，注意言辞，务必尺度适中，张弛有度，共同维护我这一亩三分地儿的文明和谐。感谢。</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-4ae46a4b361784049a44cd7782044796_b.jpg" data-caption="" data-size="normal" data-rawwidth="300" data-rawheight="297" class="content_image" width="300"/></figure><hr/><p><b>《原神》系上海米哈游影铁科技有限公司版权所有。本文仅对游戏内出现的部分效果进行个人理解上的技术分享。本文并不涉及任何资源破解，解包等任何对该游戏的hack行为，因此并不保证与游戏中的实现方式一致。评论中不要进行任何对原游戏的非规定内的操作的讨论，如果发现，会进行删除。请自觉维护原着者版权。</b><br/><b>以上！！！！</b><br/>嗯，首先恭喜《原神》今儿PC开放测试了。然后群里大佬们推荐写点儿东西，蹭下热度，我就去Bilibili云了一波。热度嘛，肯定是有时效性的，为了趁热，我就赶紧找了些比较熟悉的效果先在这儿分享一下我的实现思路。可能之后还会持续进行更新，也欢迎评论进行相关效果的提问，之后可能会持续进行更新。</p><h2><br/>一、光与影</h2><p><br/>游戏中的影子大致可以区分为以下几类：<br/><b>1、场景的静态烘焙阴影。</b><br/>游戏中的场景应该主要还是基于lightmap实现的静态阴影。对于植被并没有计算lightmap，其实我感觉可以在草等植被的下方利用AO去改善以下草等植被的光影效果的。<br/>因为开放世界的超远视距，我猜测，游戏的lightmap是分3个级别的。近距离高精度的lightmap，中距离低精度lightmap，远距离烘焙顶点色lightmap。</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-53cfd2c05f4604232fc4a0f916e58aa7_b.jpg" data-size="normal" data-rawwidth="376" data-rawheight="234" class="content_image" width="376"/><figcaption>诸如草这种植被，是不进行lightmap的烘焙的</figcaption></figure><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-ab3b5a910e013327fd6983bcf3ab0a0e_b.jpg" data-size="normal" data-rawwidth="364" data-rawheight="232" class="content_image" width="364"/><figcaption>近距离下，灌木丛还是有lightmap的</figcaption></figure><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-25de923edab8b806a7eb2cac3ec3ea08_b.jpg" data-size="normal" data-rawwidth="454" data-rawheight="244" class="origin_image zh-lightbox-thumb" width="454" data-original="https://pic1.zhimg.com/v2-25de923edab8b806a7eb2cac3ec3ea08_r.jpg"/><figcaption>中距离下，灌木植被阴影消失。</figcaption></figure><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-ade38cc9995d71b79f37c45d338706ef_b.jpg" data-size="normal" data-rawwidth="442" data-rawheight="218" class="origin_image zh-lightbox-thumb" width="442" data-original="https://pic1.zhimg.com/v2-ade38cc9995d71b79f37c45d338706ef_r.jpg"/><figcaption>这种超远距离下的lightmap可能就直接烘焙到低模顶点色上了</figcaption></figure><p>这里顺便补充一点，因为时间有限，随便看了几个相关视频，所以并不清楚游戏中是不是有实时的场景光影，所以静态烘焙这部分也只是猜测。如果有实时的光影变化的话，我可以再提供几个思路，一个是distanceShadowMask的思路，就是远距离烘焙与近距离实时结合。另一个是预烘焙多角度lightmap思路，就是提前将阳光多个角度的lightmap进行预烘焙，通过插值进行过度。我记得哪个游戏好像用过，我有空找一下，后面补上。</p><p><b>2、静态物件模拟实时投影。</b><br/>因为草是不烘焙lightmap的，但阴影下的草又如何变暗呢？还有角色走到阴影下面，又是如何处理的呢？应该是使用的lightprobe，就是光照探针。</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-48fe73fd798122b278e067d8a04cb9c7_b.jpg" data-size="normal" data-rawwidth="518" data-rawheight="314" class="origin_image zh-lightbox-thumb" width="518" data-original="https://pic1.zhimg.com/v2-48fe73fd798122b278e067d8a04cb9c7_r.jpg"/><figcaption>使用光照探针实现明暗处角色的区别，草也一样</figcaption></figure><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-aecfafe2a26a8f4c3f29bb76ba5b01b5_b.jpg" data-size="normal" data-rawwidth="316" data-rawheight="224" class="content_image" width="316"/><figcaption>光照探针沿着阴影边缘里外布置两排(保证暗部小球可以被阴影遮挡，有时候，可能会根据光照角度稍微倾斜，而不是上图的直上直下)即可实现这种效果</figcaption></figure><p><b>3、实时阴影。</b><br/>这部分主要用来实现可动物件对场景的实时投影。从我的观察来看，游戏中的可动物件的实时阴影是使用的ProjectShadow实现的。就是设置一个与光照角度一致的正交相机跟随角色进行拍摄，设定一定的拍摄范围，并在边缘进行阴影过度。然后使用Project将渲染的图投影到地面即可。好处是投影的距离可控，投影的物体和接收阴影的物体可控，阴影分辨率高，且不进行灯光深度绘制的草上也可以绘制阴影，一句话就是性能较好。</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-6a255dfc37a85fe4ebb366c34eb0b773_b.jpg" data-size="normal" data-rawwidth="546" data-rawheight="410" class="origin_image zh-lightbox-thumb" width="546" data-original="https://pic1.zhimg.com/v2-6a255dfc37a85fe4ebb366c34eb0b773_r.jpg"/><figcaption>角色的阴影投影到草上(草是不会进行灯光深度绘制的，要实现阴影，只能如此)</figcaption></figure><p>缺点自然是无法实现真实的阴影投射和在阴影下会产生双重阴影的问题。</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-58930790f1d118cdb3a1806e68e6dc7d_b.jpg" data-size="normal" data-rawwidth="712" data-rawheight="214" class="origin_image zh-lightbox-thumb" width="712" data-original="https://pic1.zhimg.com/v2-58930790f1d118cdb3a1806e68e6dc7d_r.jpg"/><figcaption>因为阴影接收体仅包含地面和部分地表物体，因此，可动物件之间是不会相互投影的</figcaption></figure><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-f27e4c9ece860631f28dbe1bf0ca42cc_b.jpg" data-size="normal" data-rawwidth="322" data-rawheight="378" class="content_image" width="322"/><figcaption>游戏对双阴影进行了修复(其实也简单，接收阴影体设置好阴影最低阈值即可)，细看还是能看到角色投到墙体上的更深的阴影。PS：却产生了一个意外效果，模拟了AO，哈哈</figcaption></figure><p><b>4、体积阴影——云影。</b><br/>目前游戏中我看到的相关的体积阴影只有云的影子。说体积阴影貌似也不确切，毕竟云也是粒子面片，不是体积模拟。做法倒是也简单，所有非特效物体的材质中内置一张明暗噪波图，然后以世界坐标的xz进行采样，并添加UV动画，来模拟云投射到地面的影子。就是说与天上的云其实没啥相关性。</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-0a1a16889fe5bd205731a298b3b23394_b.jpg" data-size="normal" data-rawwidth="256" data-rawheight="256" class="content_image" width="256"/><figcaption>诸如此类的图即可</figcaption></figure><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-45bdb860da1bc8b97910753d25c9d572_b.jpg" data-caption="" data-size="normal" data-rawwidth="626" data-rawheight="348" class="origin_image zh-lightbox-thumb" width="626" data-original="https://pic1.zhimg.com/v2-45bdb860da1bc8b97910753d25c9d572_r.jpg"/></figure><p>嗯，对于室内呢，肯定是不会受云的影子影响的，所以还需要增加一个判断。例如跟随角色增加一个垂直照射的相机采样当前位置的深度，采样云影的时候，计算以下顶点距离垂直相机的距离与深度比较即可(诸如雨雪等的垂直遮挡也是这么做)。或者更简单粗暴点儿的话，就是无视就好了，毕竟就算是现实中，大片云飘过，屋里也是会暗一下的。<br/><b>5、角色脸部卡通明暗。</b><br/>米哈游的卡通渲染，在国内一直是做的很牛逼的了。尤其是脸部非常舒服的明暗过度以及鼻翼、三角区的特殊阴影表现。这部分因为比较特殊，我这里就详细介绍一下其相关原理。</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-344871bea8b450ec499509c0184c102d_b.jpg" data-size="normal" data-rawwidth="704" data-rawheight="458" class="origin_image zh-lightbox-thumb" width="704" data-original="https://pic1.zhimg.com/v2-344871bea8b450ec499509c0184c102d_r.jpg"/><figcaption>非常舒服亮眼的卡通阴影表现</figcaption></figure><p>这部分的实现，其实知道原理的话，也非常简单。<br/>首先，卡通渲染的光照修正主要通过两种手段进行。</p><ol><li>最早期的日本的模型法线修正法。在3dsmax或其他三维制作软件中，对模型的法线进行修正，例如将脸部按照球面将法线整平。这部分可以通过脚本进行自动实现，从而提高效率。</li></ol><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-4670634b35b511309433a1658c1b0f5b_b.jpg" data-size="normal" data-rawwidth="916" data-rawheight="438" class="origin_image zh-lightbox-thumb" width="916" data-original="https://pic1.zhimg.com/v2-4670634b35b511309433a1658c1b0f5b_r.jpg"/><figcaption>通过法线修正，让脸部的光照明暗更加“卡通”</figcaption></figure><p>2. 从罪恶装备X开始兴起的AO图修正法，这方法，崩坏3也采用了。就是通过绘制AO图的方式，对光照的数值进行修正。</p><figure data-size="normal"><img src="https://picb.zhimg.com/v2-98f0751e728b39741bf6a073039b726d_b.jpg" data-size="normal" data-rawwidth="700" data-rawheight="342" class="origin_image zh-lightbox-thumb" width="700" data-original="https://picb.zhimg.com/v2-98f0751e728b39741bf6a073039b726d_r.jpg"/><figcaption>就是下面那张附到模型之后，看上去类似AO的贴图效果</figcaption></figure><p>这是我目前知道的主要的两种手段，一般来说，两种方法会混合使用。法线修正可以提供比较整体的卡通光照效果，而AO修正，则可以实现更加细节上的调整。<br/>而诸如游戏中这种细节上的修正，更大的可能就是使用了AO图进行修正。将脸部三角区这种会更久的受光部分绘制浅色，将鼻翼这种更早进入暗部的部分绘制暗色，就能实现上图的效果。</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-e4e65805c794e02ea1067d0d91467bed_b.jpg" data-size="normal" data-rawwidth="254" data-rawheight="254" class="content_image" width="254"/><figcaption>顶上的暗部表示头发阴影，浅色是三角区，深色是鼻翼暗部</figcaption></figure><p>但是，但是这里产生了一个问题。因为鼻翼一旦绘制了深色，虽然从受光进入背光时，会更快的进入，是对的。但当从背光进入受光时，因为鼻翼的角度，应该更快的进入受光才对，但这里，仍然会因为AO的问题，延迟了变亮的时间。三角区的问题也一样。从背光进入受光时，提前受光是对的。但从受光进入背光时，因为角度，是应该提前背光的，但浅色却让三角区的变暗延后了。<br/><b>注：这里我从网上下载了《崩坏3》的部分模型，进行了相关测试。《崩坏3》系上海米哈游影铁科技有限公司版权所有。以下部分展示均基于该模型，仅作为技术交流分享。如侵权，我会接到通知后删除并替换为其他模型。</b></p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-009d8c1a559136b67f36dccabebf2d16_b.jpg" data-size="normal" data-rawwidth="690" data-rawheight="496" class="origin_image zh-lightbox-thumb" width="690" data-original="https://pic1.zhimg.com/v2-009d8c1a559136b67f36dccabebf2d16_r.jpg"/><figcaption>光照从左往右，右侧的脸，背光部分是正确的，但受光部分的明暗明显不对</figcaption></figure><p>所以，这样简单的绘制一个颜色显然是不行的。道理这里也已经很明了了，光影的绘制，是需要基于受光和背光两种的。受光时，鼻翼更早进入亮部，背光时，鼻翼则首先变暗。三角区则相反。所以，可以绘制两张图，一张绘制受光情况，一张绘制背光情况，如下：</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-77b8b7314eea7813bd0933507e87a249_b.jpg" data-size="normal" data-rawwidth="510" data-rawheight="250" class="origin_image zh-lightbox-thumb" width="510" data-original="https://pic1.zhimg.com/v2-77b8b7314eea7813bd0933507e87a249_r.jpg"/><figcaption>左侧背光时采样，右侧受光时采样</figcaption></figure><p>而判断是否受光，只需要判断相对于脸部的朝向，灯光的朝向向左还是向右即可来决定。<br/>嗯，鉴于米哈游官方并没有进行相关解密，且我们项目也在使用我的方法实现该效果，所以这里就不进行更详细的说明了。</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-b5062dc7d88b31ca60774acca5b0e50d_b.gif" data-size="normal" data-rawwidth="720" data-rawheight="486" data-thumbnail="https://pic1.zhimg.com/v2-b5062dc7d88b31ca60774acca5b0e50d_b.jpg" class="origin_image zh-lightbox-thumb" width="720" data-original="https://pic1.zhimg.com/v2-b5062dc7d88b31ca60774acca5b0e50d_r.jpg"/><figcaption>目前我本人实现的效果如图</figcaption></figure><p>嗯，主要的光影部分就说到这里。下面说物理(模拟物理)。</p><h2><br/>二、物理的模拟</h2><p><br/>这里主要说一些类似物理相关的东西，例如：IK，水纹，地表属性<br/><b>1、脚步IK（反向动力学）。</b><br/>最早知道IK这东西，还是我在昱泉国际的时候，有幸参与了流星和射雕三部曲的相关开发。之后很久，在国内游戏中就几乎再也没见过相关的效果，直到今天的原神。它的效果就是如下：</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-8101da2fd8c41065c8cae257bec35848_b.jpg" data-size="normal" data-rawwidth="774" data-rawheight="410" class="origin_image zh-lightbox-thumb" width="774" data-original="https://pic1.zhimg.com/v2-8101da2fd8c41065c8cae257bec35848_r.jpg"/><figcaption>脚部位置会根据站位的高低差进行自动修正，避免脚部穿插进地面</figcaption></figure><p>这部分的实现，是通过检测玩家脚部的地面高度位置和法线，自动对脚部进行位置的修正。</p><figure data-size="normal"><img src="https://picb.zhimg.com/v2-bdab68d87aaf3a38491d7af38a150d29_b.jpg" data-size="normal" data-rawwidth="762" data-rawheight="652" class="origin_image zh-lightbox-thumb" width="762" data-original="https://picb.zhimg.com/v2-bdab68d87aaf3a38491d7af38a150d29_r.jpg"/><figcaption>通过默认站姿，获取脚步位置(射线检测)地面的法线，进行脚步角度调节。获取高度，进行大腿旋转角度、膝关节和脚步新位置的调节</figcaption></figure><p>据我所知，IK的调节是通过对新位置的多次迭代来进行修正的。</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-ceb0c51e09a0b0029cc2980cc5ce44b7_b.jpg" data-size="normal" data-rawwidth="556" data-rawheight="374" class="origin_image zh-lightbox-thumb" width="556" data-original="https://pic1.zhimg.com/v2-ceb0c51e09a0b0029cc2980cc5ce44b7_r.jpg"/><figcaption>游戏貌似只对待机进行了修正，其他动作还是会穿</figcaption></figure><p>当然，游戏中，对地面的信息获取，可不止于高度和法线，还有其他东西，后面会说。<br/>后来看到还有爬墙，还以为做了类似爬梯子的抓取位置定位功能呢。这样，手部，脚步IK就全了。不过结果并不是，只是墙面的UV进行了对齐。</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-47910c9bbd78a8630fbfd68cb040acc9_b.jpg" data-size="normal" data-rawwidth="326" data-rawheight="414" class="content_image" width="326"/><figcaption>手部位置对齐了墙的缝隙，脚步就差了点儿。调整一下UVScale会不会就能对齐了？项目组肯定试过，不过可能因为砖缝过密，就放弃了</figcaption></figure><p><b>2、水纹。</b><br/>当角色从水里移动时，水面产生的涟漪。不过游戏中只是播放了粒子动画，且涟漪也是正圆型的简单涟漪。</p><figure data-size="normal"><img src="https://picb.zhimg.com/v2-b7178f0c2847e70125c475377d27beb6_b.jpg" data-size="normal" data-rawwidth="744" data-rawheight="486" class="origin_image zh-lightbox-thumb" width="744" data-original="https://picb.zhimg.com/v2-b7178f0c2847e70125c475377d27beb6_r.jpg"/><figcaption>不论移动还是静止，都是圆形的涟漪</figcaption></figure><p>其实也可以试试，实现一下三角型的涟漪，不是更有感觉吗？</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-4123602b252c7bd784eafe2e0076d52b_b.jpg" data-size="normal" data-rawwidth="296" data-rawheight="216" class="content_image" width="296"/><figcaption>坦克世界中通过顶点运动和法线扰动产生的三角涟漪</figcaption></figure><p>美术绘制三角形涟漪纹理，做类似圆形涟漪相同的扩散粒子效果(或者用UV序列帧实现)。然后程序端，根据角色的移动与否，播放原型或三角形粒子特效。如果是移动的话，还得在播放三角涟漪效果时，根据上一帧的位置，对粒子特效进行一定角度的旋转，让三角涟漪的顶点一直朝向运动方向。<br/><b>3、地表属性</b><br/>游戏中，地面是分为很多种类的，且人在上面会有不同的属性或行为。例如水面会潮湿，湿地会有脚印，干地跑动会有尘土，草地会有碎草等。</p><figure data-size="normal"><img src="https://picb.zhimg.com/v2-f244c88cd7e2c24f431b32159d61c5d8_b.jpg" data-size="normal" data-rawwidth="716" data-rawheight="276" class="origin_image zh-lightbox-thumb" width="716" data-original="https://picb.zhimg.com/v2-f244c88cd7e2c24f431b32159d61c5d8_r.jpg"/><figcaption>潮湿地面的脚印，脚印本身，用粒子效果即可实现。</figcaption></figure><p>这部分实现其实不难，主要在于工具流的实现。<br/>这里说下我的方案：在刷地形纹理的时候，将地表的纹理属性绘制到纹理的A通道，例如：像素颜色0~10表示湿地，30~40表示干地。然后正常进行地表纹理的刷制。shader中使用开关进行地面A通道值的绘制，并根据混合纹理的权重，取最高权重的纹理A通道值作为地面A通道的主属性。并根据权重值，对属性值进行0~10的衰减。例如：该位置通过湿地和干地纹理进行混合，混合值为湿地0.8，干地0.2。则该位置的A通道主属性值就是0~10的湿地。再假设权重值从0~1对应属性值进行10~0的衰减。则这个位置的属性值就是8。<br/>地表制作完成之后，就可以使用工具，将地表A通道的值烘焙到地表顶点色上了。<br/>然后，游戏中就可以在修正IK的同时，返回角色位置的顶点颜色，来进行对应地面属性的表现了。<br/>当然还有很多办法进行实现，例如摆放属性标识面片等。<br/>下面说一下游戏中的植被——草。</p><h2><br/><b>三：草</b></h2><p><br/>游戏场景中是存在大面积，很密集的草地表现的。这部分如果使用通常的渲染方式，消耗是很大的。要实现甚至在手机上也能运行的效果，只可能使用ES3.2才可以使用的GPU实例化渲染了。<br/>目前Unity一共支持三种GPU实例化渲染接口，<a href="https://link.zhihu.com/?target=https%3A//docs.unity3d.com/ScriptReference/Graphics.DrawMesh.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">Graphics.DrawMesh</a>，G<a href="https://link.zhihu.com/?target=https%3A//docs.unity3d.com/560/Documentation/ScriptReference/Graphics.DrawMeshInstanced.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">raphics.DrawMeshInstanced</a> 和 <a href="https://link.zhihu.com/?target=https%3A//docs.unity3d.com/560/Documentation/ScriptReference/Graphics.DrawMeshInstancedIndirect.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">Graphics.DrawMeshInstancedIndirect</a>。<br/>相比来说，<a href="https://link.zhihu.com/?target=https%3A//docs.unity3d.com/ScriptReference/Graphics.DrawMesh.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">Graphics.DrawMesh</a>实现最简单，unity内置的材质instance就是这种。但相对来说，性能也最差。<br/>G<a href="https://link.zhihu.com/?target=https%3A//docs.unity3d.com/560/Documentation/ScriptReference/Graphics.DrawMeshInstanced.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">raphics.DrawMeshInstanced</a>相对来说实现比较复杂，需要手动传入各种渲染信息，且存在同批渲染上限，但性能比<a href="https://link.zhihu.com/?target=https%3A//docs.unity3d.com/ScriptReference/Graphics.DrawMesh.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">Graphics.DrawMesh</a>要好出不少。<br/><a href="https://link.zhihu.com/?target=https%3A//docs.unity3d.com/560/Documentation/ScriptReference/Graphics.DrawMeshInstancedIndirect.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">Graphics.DrawMeshInstancedIndirect</a>的实现最为复杂，需要自己申请参数缓冲区进行传参。但优势就是没有同批上限，性能最好。<br/>几年前我对三种草进行测试的时候，数据如下：<br/>我机器显卡1060，40000颗草不进行裁剪，开启实时阴影，且实现与人的交互。Graphics.DrawMesh是4帧左右，G<a href="https://link.zhihu.com/?target=https%3A//docs.unity3d.com/560/Documentation/ScriptReference/Graphics.DrawMeshInstanced.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">raphics.DrawMeshInstanced</a>为57帧左右，最高性能的Graphics.DrawMeshInstancedIndirect为90帧左右运行。</p><a href="https://www.zhihu.com/zvideo/1289359178763366400" data-draft-node="block" data-draft-type="link-card"></a><p><br/>然后再回到游戏中。<br/>貌似游戏中的草和角色的交互表现比较弱，也可能是我没看出来。然后说一下草的燃烧效果。</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-12ed3f1d7f4f346039f6c0f3f70afecc_b.jpg" data-size="normal" data-rawwidth="930" data-rawheight="430" class="origin_image zh-lightbox-thumb" width="930" data-original="https://pic1.zhimg.com/v2-12ed3f1d7f4f346039f6c0f3f70afecc_r.jpg"/><figcaption>地面的草被火属性技能攻击到时会燃烧+枯萎</figcaption></figure><p>这个效果的实现原理上来说其实也比较简单。火焰其实和草并没有真实的交互。燃烧效果是技能释放位置和半径区域内，固定间隔的随机位置摆放火焰特效。如果该位置有草，就播放燃烧粒子特效，没有就不添加特效(如何判断是否有草可以参考地表属性部分)。<br/>然后草的燃烧枯萎效果，其实就是在草的shader中，添加一个宏开关，当需要播放燃烧枯萎效果时，将开关打开，然后根据传入的技能范围，判断草是否处于该位置，来在普通草纹理和枯萎纹理(或乘上枯萎颜色)中进行权重过度即可。消失过程，可以使用UV从上往下的根据时间的discard。追求效果，还可以在切口处叠加一个锐利的噪波来实现燃烧狗牙效果。</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-21d7a69c9f8b17b4d2ba04b2cd35d88d_b.jpg" data-size="normal" data-rawwidth="770" data-rawheight="328" class="origin_image zh-lightbox-thumb" width="770" data-original="https://pic1.zhimg.com/v2-21d7a69c9f8b17b4d2ba04b2cd35d88d_r.jpg"/><figcaption>草烧过之后的枯萎效果</figcaption></figure><h2>四：其他效果</h2><p><br/><b>1、地面属性互动</b><br/>说起地面属性互动玩法，原神刚爆出这个玩法的时候，一堆人说抄袭塞尔达巴拉巴拉，云云的。<br/>嗯，怎么说呢，项目组肯定是很大程度上参考了塞尔达的各种效果和玩法，但这并不应该是抨击游戏的一个点不是？<br/>说句不好听的，就这种地面属性互动的玩法，我也可以说塞尔达(2017)抄袭神界3原罪(2015)，神界3原罪抄袭激战2(2013)，激战2抄袭深渊传说(2005)，深渊传说抄袭重装机兵(1991)呢。玩法嘛，咱就没必要追根溯源了，用自己游戏的方式呈现给玩家，让玩家能乐于其中，这就够了啊。</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-1c89df09ec4dc4a7de95406b7b97e6d6_b.jpg" data-size="normal" data-rawwidth="806" data-rawheight="450" class="origin_image zh-lightbox-thumb" width="806" data-original="https://pic1.zhimg.com/v2-1c89df09ec4dc4a7de95406b7b97e6d6_r.jpg"/><figcaption>原罪中，被各种属性“污染”的地面</figcaption></figure><p>回到实现上，这里说一下最常见的冰效果。玩家释放冰属性技能以后，在水面上会结冰，玩家可以站在上面。特效表现上，这里使用的是Mesh面片贴地的方式实现的，而不是投影或decalMesh。</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-f4e6ebe8c8ea54fc07cd3961c75f04b3_b.jpg" data-size="normal" data-rawwidth="602" data-rawheight="296" class="origin_image zh-lightbox-thumb" width="602" data-original="https://pic1.zhimg.com/v2-f4e6ebe8c8ea54fc07cd3961c75f04b3_r.jpg"/><figcaption>贴地的面片会和其他物体产生穿插</figcaption></figure><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-4f720cf3eb182a2ffea0791e98827bf3_b.jpg" data-size="normal" data-rawwidth="712" data-rawheight="228" class="origin_image zh-lightbox-thumb" width="712" data-original="https://pic1.zhimg.com/v2-4f720cf3eb182a2ffea0791e98827bf3_r.jpg"/><figcaption>投影的话，效果是可以覆盖地面物件的，decalMesh同理</figcaption></figure><p>嗯，既然是Mesh嘛，那冰上的一些效果就可以通过检测Mesh的方式去各种实现了。<br/><b>2、深度和扭曲</b><br/>游戏中是开启了相机深度的，这样，就可以实现诸如水边和粒子交界边缘的柔和过度了。</p><figure data-size="normal"><img src="https://picb.zhimg.com/v2-8a061bec53a1013e51b711fb767d0934_b.jpg" data-size="normal" data-rawwidth="796" data-rawheight="136" class="origin_image zh-lightbox-thumb" width="796" data-original="https://picb.zhimg.com/v2-8a061bec53a1013e51b711fb767d0934_r.jpg"/><figcaption>水的边缘和火焰粒子贴地位置的柔和过度</figcaption></figure><p>且采用了GrabPass(或RT方式)实现了水下的扭曲和散焦光斑。</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-85bc7f29a77a7453a09d4e9682edfbfe_b.jpg" data-caption="" data-size="normal" data-rawwidth="550" data-rawheight="280" class="origin_image zh-lightbox-thumb" width="550" data-original="https://pic1.zhimg.com/v2-85bc7f29a77a7453a09d4e9682edfbfe_r.jpg"/></figure><p><b>3、云海和雾</b><br/>原神沿用了崩坏3的一贯做法，使用粒子面片的方式来实现云海的效果。</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-8c8fef3611a7a4a2a5b8159df72bbd00_b.jpg" data-size="normal" data-rawwidth="1022" data-rawheight="490" class="origin_image zh-lightbox-thumb" width="1022" data-original="https://pic1.zhimg.com/v2-8c8fef3611a7a4a2a5b8159df72bbd00_r.jpg"/><figcaption>面片感还是有的，不过和天空球上的云体呈现在一起看，效果还是可以的</figcaption></figure><p>估计项目组应该也尝试过光线步进的做法，不过要实现这种卡通风格的效果的话，可能就不太理想了。<br/>游戏中的雾应该也是采用的距离+高度雾，叠加粒子雾效的扰动。不过整体使用了大气散射的效果，所以空间感和颜色及光感上表现的更好。</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-6a63ef427ffc4ac52b193a7e843afaff_b.jpg" data-caption="" data-size="normal" data-rawwidth="890" data-rawheight="550" class="origin_image zh-lightbox-thumb" width="890" data-original="https://pic1.zhimg.com/v2-6a63ef427ffc4ac52b193a7e843afaff_r.jpg"/></figure><p>最后，说一下<b>开放世界。</b><br/>策划相关的开放世界，可以参看我之前的帖子，这里就不说了。</p><a href="https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzg3ODA4MDYxNg%3D%3D%26mid%3D2247483767%26idx%3D1%26sn%3Dfa100efcdb1010938728bcc5da2bbeee%26scene%3D19%26ascene%3D7%26devicetype%3Dandroid-29%26version%3D27001239%26nettype%3DWIFI%26abtest_cookie%3DAAACAA%253D%253D%26lang%3Dzh_CN%26exportkey%3DAWEz4vae7JRMOOuvkM9iurE%253D%26pass_ticket%3Dmj2LLkJYMWFmI%252FcEZpLP5oz%252FT4JFIEomlfwODesgK9zdaGUMtyVX7VY7drRFxrIq%26wx_header%3D1" data-draft-node="block" data-draft-type="link-card" class=" wrap external" target="_blank" rel="nofollow noreferrer">终章-开放世界</a><p>简单说一下开放世界的渲染和技术实现的一些东西。<br/>1、加载<br/>开放世界的游戏不同与传统的关卡类的游戏，它并没有场景加载单元的存在。换句话说，游戏展现在玩家面前的就是整个游戏的世界，几乎所有可视资源都要进行加载。这种体量按照普通的方式进行实现，显然很不现实。米哈游从崩坏3开始，就在尝试做开放世界的相关东西。而其中的大头我估计就在资源的如何合理加载上。<br/>一般来说，大世界游戏，会将地表进行切块处理，并将地表块上相关的资源(物件，纹理，光照等等)进行绑定。然后根据玩家所在区块，以九宫格方式进行加载(就是会预先加载除玩家所在区域外的周围几个区域)。再根据视锥，对前方额外的可视区域进行低精度加载。<br/>虽然说起来很简单，但里面真正的细节很难处理。例如：区域交界的光照，阴影纹理如何生成，如何消除接缝，如何进行距离的Lod过度。加载和卸载的策略又如何，Lod策略又如何。相关的美术制程和工具流又如何实现，等等。或许只有经历过的人才会清楚其中的痛苦了。<br/>2、性能<br/>除了加载能搞定的一部分外，还有加载后的超视距的渲染压力是需要处理的。别的不说，Unity的整个地形系统就要重写。地形Mesh需要根据距离进行自动Lod，材质和纹理也需要进行相应的Lod处理。</p><figure data-size="normal"><img src="https://pic1.zhimg.com/v2-0dea344cb460b847e72fe7b0633bb4f0_b.jpg" data-size="normal" data-rawwidth="1142" data-rawheight="338" class="origin_image zh-lightbox-thumb" width="1142" data-original="https://pic1.zhimg.com/v2-0dea344cb460b847e72fe7b0633bb4f0_r.jpg"/><figcaption>地形Mesh的二元三叉树Lod，优势就是没有接缝</figcaption></figure><p>然后就是各种Lod的优化策略。例如传统的减面Lod，各种遮挡剔除(设置Collider，设置Area和Potal)，远距离的imposter策略等等。<br/>这些每一个系统，Unity都没有很好的解决方案，都需要自己去实现或者优化。而这些还都需要配套的美术工具让美术进行最优的设置。<br/>所以，开放世界的游戏，可真的不是想做就能做的啊。<br/>先这些吧，后面想起什么再进行补充。</p><p>还是那句话，<b><i>以上都是我基于视频效果的个人解析。并能不保证和官方一致甚至是正确性。还请谨慎参考。</i></b></p><p><br/><b>最后，尊重原着，尊重知识产权，不要对游戏进行违规操作和讨论。感谢。</b></p><hr/><p>下面我补充一些评论中的问题，统一回复到这里：</p><p><b>1、为什么反编译、解包别人游戏这么普遍了，我这里却禁止讨论。</b></p><p>我不会评价这种行为的对错好坏，国家之间尚存在信息谍战，我当然知道这种行为的普遍。但普遍并不表示就合理，就像996。</p><p>当游戏开发商们的所有技术，所有经验都不再成为技术壁垒的时候，只会产生两种结果：</p><p>1、投入产出不成比，不会再有公司花精力去研究新东西，技术裹足不前。</p><p>2、天下一统，没有了多样性，失去了未来进化的可能。</p><p>所有的恶果，最后会毫无保留的奉还给整个游戏业。</p><p>我这里都是基于我自己的知识和游戏视频中的效果进行的猜测，自然和他们原本做法会有偏差，甚至大相径庭。但却产生出了更多实现的可行性猜测。</p><p>最后，我是基于别人的作品，分析别人的作品，相互的尊重应该是我起码的底线。</p><p><b>2、移动平台效果会怎样，如何看待多端。</b></p><p>其实这个游戏多平台的意义并不在于或者是说重点不在于多平台上的美术表现上，而是它打通了不同平台之间的网络壁垒，为多平台游戏模式协作提供了可能性。</p><p>举个简单栗子，我在PC平台上爽战斗，在移动平台上看剧情做养成，在游戏机平台上多手柄的家庭互联，一个游戏，N种模式，彻底霸占你的所有时间，哈哈。</p><p><b>3、如何评价原神中，米哈游的技术实力体现。</b></p><p>首先，卡通渲染的效果，目前来看，在经历了无光，受光，描边，法线，3S，pbr，多材质混合，大气等效果的进化后，也逐渐进入了一个瓶颈期了。后面大概率会往两个方向走。一是更风格化的美术，例如柔和油画，国画，厚涂等效果风格。二则是基于pbr理论的风格化材质，例如卡通毛发，卡通丝绸塑料等材质区分表现。而米哈游应该是精于第二条路，但会更多的受限于平台性能。</p><p>其次，本游戏既然多端互联，又是开放世界。所以，美术效果上必然进行了妥协。不能充分体现米哈游的技术实力。</p><p>要说的话，这个游戏可能更多的体现了米哈游对新游戏模式的快速吸收实现，美术工具流的完善和对引擎开发改造上的能力了。</p><p><b>4、游戏中存在的反射，多阴影。</b></p><p>反射如果只是水平面的话，可以用平面反射做。如果各种角度都有反射，可能是屏幕空间反射。这游戏应该还没上光追。</p><p>如果有另外一个影子可能是锥形光的实时阴影，也可能是另外一个project。多阴影是很耗的，肯定分辨率会超低。点光源投影应该不太可能，性能上更耗而且也没那必要。</p>